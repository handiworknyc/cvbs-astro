---
import { normalizeLayouts, type NormRow } from "./normalize";

// Props coming *into* this renderer
interface Props {
  layouts?: any[];
  /** Optional: "service" | "service-area" to mirror hw_get_current_taxonomy_context() */
  taxContext?: string | null;
}

const {
  layouts = [],
  taxContext = null,
} = Astro.props as Props;

// ✅ Use the same env key everywhere (public env vars in Astro must start with PUBLIC_)
const WP_BASE = import.meta.env.WP_BASE_URL; 
const slug = Astro.params?.slug as string | undefined;

// 🔒 Fetch current post (guarded)
let currentPost: any = null;
if (WP_BASE && slug) {
  try {
    const res = await fetch(`${WP_BASE}/wp-json/wp/v2/pages?slug=${encodeURIComponent(slug)}`);
    if (res.ok) {
      const posts = await res.json();
      currentPost = posts?.[0] ?? null;
    }
  } catch {}
}

const postId = currentPost?.id ?? null;

// ❌ You were re-declaring `layouts` and overwriting the prop.
// If you want to prefer WP layouts when present, do this instead:
const fetchedLayouts = currentPost?.acf?.layouts ?? null;
const effectiveLayouts = Array.isArray(fetchedLayouts) && fetchedLayouts.length > 0
  ? fetchedLayouts
  : layouts;

// Normalize to { name, key, data, meta }
const rows: NormRow[] = normalizeLayouts(effectiveLayouts);

/**
 * Auto-register all components in ./components/flex
 */
const modules = import.meta.glob("/src/components/flex/*.astro", { eager: true });

// Build registry: { "hero_text": <Component>, ... }
const REGISTRY: Record<string, any> = {};
for (const [p, mod] of Object.entries(modules)) {
  const file = p.split("/").pop() || "";
  const key = file.replace(/\.astro$/i, "");
  // @ts-expect-error default is the astro component
  REGISTRY[key] = (mod as any).default;
}

// Helpers to resolve a component from a layout name
function toKebab(s: string) {
  return s.replace(/[_\s]+/g, "-").replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
}
function toSnake(s: string) {
  return s.replace(/[-\s]+/g, "_").replace(/([a-z0-9])([A-Z])/g, "$1_$2").toLowerCase();
}
function toCamel(s: string) {
  const base = s.replace(/[-_ ]+(\w)/g, (_, c) => (c ? c.toUpperCase() : ""));
  return base.charAt(0).toLowerCase() + base.slice(1);
}
function resolveComponent(layoutName: string) {
  if (REGISTRY[layoutName]) return REGISTRY[layoutName];
  const cands = [toKebab(layoutName), toSnake(layoutName), toCamel(layoutName)];
  for (const k of cands) if (REGISTRY[k]) return REGISTRY[k];
  return null;
}

// Background logic
const firstLayout = rows[0]?.name ?? "";

function isAltBgContext(): boolean {
  const taxOk = taxContext === "service" || taxContext === "service-area";
  return taxOk || firstLayout === "service_area_banner";
}

function computeBgWrapClass(row: NormRow, rowindex: number): string | null {
  const ls = (row as any)?.data?.layout_settings ?? {};
  const bgColor: string = typeof ls?.bg_color === "string" ? ls.bg_color.trim() : "";
  const toBgClass = (val: string) => {
    const v = val.toLowerCase();
    if (!v || v === "none") return null;
    if (/\bbg-1\b/.test(v)) return v;
    return `${v}bg-1`;
  };
  const explicit = toBgClass(bgColor);
  if (explicit) return explicit;
  if (isAltBgContext() && rowindex >= 2) {
    return rowindex % 2 === 0 ? "whitebg-1" : "mintbg-1";
  }
  return null;
}
---


{rows.length === 0 && (
  <div class="prose mx-auto my-12 text-center opacity-70">
    <p>No content yet.</p>
  </div>
)}

{rows.map((row, idx) => {
  const Comp = resolveComponent(row.name);
  const rowindex = idx + 1; // 1-based index

  const idAttr = row.meta.id ? { id: row.meta.id } : {};
  const sectionClass = ["flex-bg", ...row.meta.classes].join(" ").trim();

  const bgWrapClass = computeBgWrapClass(row, rowindex);
  const innerWrapClasses = [
    "flex-bg-inner",
    "z-100",
    "pr",
    ...(row.meta?.ofh ? ["ofh"] : []),
  ].join(" ");

  return (
    <section {...idAttr} class={sectionClass}>
      {row.meta.preHtml && <div set:html={row.meta.preHtml} />}

      {bgWrapClass ? (
        <div class={bgWrapClass}>
          <div class={innerWrapClasses}>
            {Comp ? (
              /* ✅ Pass postId, currentPost, rowIndex into every sub-layout */
              <Comp {...row.data} postId={postId} currentPost={currentPost} rowIndex={rowindex} />
            ) : (
              <div class="mx-auto my-8 max-w-5xl rounded-xl border p-4">
                <p class="font-semibold">
                  Unknown layout: <code>{row.name}</code>
                </p>
                <p class="text-sm mt-1">
                  Create <code>src/lib/wp/components/flex/{toSnake(row.name)}.astro</code> (or{" "}
                  <code>{toKebab(row.name)}.astro</code>) to handle this layout.
                </p>
                <details class="mt-2">
                  <summary class="cursor-pointer">Inspect data</summary>
                  <pre class="mt-2 overflow-auto text-sm">
                    {JSON.stringify(row.data, null, 2)}
                  </pre>
                </details>
              </div>
            )}
          </div>
        </div>
      ) : (
        <>
          {Comp ? (
            <Comp {...row.data} postId={postId} currentPost={currentPost} rowIndex={rowindex} />
          ) : (
            <div class="mx-auto my-8 max-w-5xl rounded-xl border p-4">
              <p class="font-semibold">
                Unknown layout: <code>{row.name}</code>
              </p>
              <p class="text-sm mt-1">
                Create <code>src/lib/wp/components/flex/{toSnake(row.name)}.astro</code> (or{" "}
                <code>{toKebab(row.name)}.astro</code>) to handle this layout.
              </p>
              <details class="mt-2">
                <summary class="cursor-pointer">Inspect data</summary>
                <pre class="mt-2 overflow-auto text-sm">
                  {JSON.stringify(row.data, null, 2)}
                </pre>
              </details>
            </div>
          )}
        </>
      )}
    </section>
  );
})}

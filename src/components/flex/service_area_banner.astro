---
/**
 * service_area_banner.astro
 * Uses the HOME BANNER infra: /astro/v1/featured/batch, enrichWithPrimaryTerms, SmartImage, toImagesMap.
 */

import SmartImage from "@ui/SmartImage.astro";
import { toImagesMap } from "@images";
import { enrichWithPrimaryTerms } from "src/lib/wp/taxonomy";
import GFForm from "@/components/GFForm.astro";
import { authHeaders } from "@/pages/api/news.json";

// ---------- Types ----------
type Img = { src: string; alt?: string };
type AnyRec = Record<string, any>;

type ImageRow = {
  acf_fc_layout: "image";
  image?: {
    // ACF image-ish shapes
    id?: number | string;
    ID?: number | string;
    alt?: string;
    title?: string;
    url?: string;
    src?: string;
    sizes?: Record<string, string>;
    media_details?: { sizes?: Record<string, { source_url: string }> };
  } | null;
};

type ProjectRow = {
  acf_fc_layout: "project";
  project?: {
    ID?: number;
    id?: number;
    post_title?: string;
    title?: string;
    // OPTIONAL helpers your API might already include:
    featured_media_url?: string;
    featured_src?: string;
    featured_sizes?: Record<string, string>;
    logoSrc?: string | null;
  } | null;
};

type Row = ImageRow | ProjectRow;

interface Props {
  gravity_forms_id?: string | number;
  banner_title?: string;     // may contain CRLF
  banner_text?: string;      // HTML
  images?: Row[];
  featuredSize?: string;     // optional override (default intch_med)
  wpBase?: string;           // pass-through to GFForm
}

const {
  gravity_forms_id,
  banner_title = "",
  banner_text = "",
  images = [],
  featuredSize = "intch_med",
  wpBase,
} = Astro.props as Props;

// ---------- Utils (same style as Home Banner) ----------
function coerceId(v: unknown): number | null {
  if (v == null || v === "") return null;
  const n = typeof v === "string" ? parseInt(v, 10) : Number(v);
  return Number.isFinite(n) && n > 0 ? n : null;
}

const WP_BASE = import.meta.env.WP_BASE_URL as string | undefined;

// Split title into lines (mirrors PHP explode on PHP_EOL)
function splitLines(s: string): string[] {
  return String(s || "").split(/\r?\n/).map(v => v.trim()).filter(Boolean);
}
const titleLines = splitLines(banner_title);

function renderTitleHTML(lines: string[]) {
  if (lines.length <= 1) return lines[0] || "";
  return lines.map((ln, i) => {
    // If you want the marker on line 2, add "icon-marker" here:
    // const cls = i === 1 ? "icon-marker" : "";
    const cls = "";
    return `<span class="block ${cls}">${ln}</span>`;
  }).join("");
}

// ---------- Build a project-like array so we can reuse the exact HOME pipeline ----------
type Normalized = {
  // Align with what Home Banner enriches:
  projectId?: number;
  title?: string;
  tag?: string | null;
  location?: string | null;
  logoSrc?: string | null;
  // For ACF image rows (non-project), we can carry an existing image:
  image?: Img | null;
  // For rendering overlay:
  __isProject: boolean;
};

// Pull a best-guess URL from an ACF image object
function pickSizeFromACFImage(img?: AnyRec): string | null {
  if (!img) return null;
  const sizes: AnyRec | undefined = img.sizes ?? img.media_details?.sizes;
  if (sizes) {
    for (const key of [featuredSize, "medium_large", "large", "medium", "intch_med", "intch_sm"]) {
      const v = sizes[key];
      if (!v) continue;
      if (typeof v === "string") return v;
      if (v?.source_url) return v.source_url;
    }
  }
  return img.url || img.src || null;
}

function pickAltFromACFImage(img?: AnyRec): string {
  return (img?.alt || img?.title || "") ?? "";
}

const normalized: Normalized[] = images.map((row) => {
  if (row?.acf_fc_layout === "project") {
    const p = (row as ProjectRow).project || {};
    return {
      projectId: p.ID ?? p.id ?? null,
      title: p.post_title ?? p.title ?? "",
      tag: null,
      location: null,
      logoSrc: p.logoSrc ?? null,
      image: null,
      __isProject: true,
    };
  }

  // Plain image row
  const img = (row as ImageRow).image || {};
  const src = pickSizeFromACFImage(img);
  const alt = pickAltFromACFImage(img);
  return {
    projectId: undefined,
    title: "", // no project title for pure image rows
    tag: null,
    location: null,
    logoSrc: null,
    image: src ? { src, alt } : null,
    __isProject: false,
  };
});

// ---------- Resolve featured images for *project rows* via the SAME batch endpoint ----------
let featured: Record<number, { src: string; alt?: string; width?: number; height?: number } | null> = {};
const projectIds = normalized.map(n => n.projectId).filter(Boolean) as number[];

if (projectIds.length && WP_BASE) {
  try {
    const base = WP_BASE.replace(/\/+$/, "");
    const url = new URL("/wp-json/astro/v1/featured/batch", base);
    url.searchParams.set("ids", projectIds.join(","));
    url.searchParams.set("size", featuredSize);

    const res = await fetch(url.toString(), { headers: { ...authHeaders() } });
    if (res.ok) {
      featured = await res.json();
    }
  } catch (e) {
    console.warn("[service_area_banner] featured batch failed:", e);
  }
}

// ---------- Enrich project rows with primary terms (service = tag, service-area = location) ----------
let rows = normalized;
try {
  rows = (await Promise.race([
    enrichWithPrimaryTerms(normalized, { tagTax: "service", locationTax: "service-area" }),
    new Promise((r) => setTimeout(() => r(normalized), 5000)),
  ])) as typeof normalized;
} catch (e) {
  console.warn("[service_area_banner] enrichWithPrimaryTerms failed:", e);
  rows = normalized;
}

// ---------- Build render items (mix project + image rows) ----------
type RenderItem = {
  // responsive image:
  images: ReturnType<typeof toImagesMap>;
  // overlay (only meaningful for project rows; image rows show nothing by default)
  overlayTitle?: string;
  overlayLocation?: string | null;
};

const renderItems: RenderItem[] = rows.map((r) => {
  // If project: prefer resolved featured
  if (r.__isProject && r.projectId && featured[r.projectId]) {
    const entry = featured[r.projectId];
    const images = toImagesMap(entry); // same as Home Banner
    return {
      images,
      overlayTitle: r.title || "",
      overlayLocation: r.location || null,
    };
  }

  // If plain image: use the given image (no responsive variantsâ€”let toImagesMap infer a simple map)
  if (r.image?.src) {
    const images = toImagesMap({ sizes: { xl: r.image.src } });
    return {
      images,
      overlayTitle: "",          // No project title for plain image rows
      overlayLocation: null,     // No location for plain image rows
    };
  }

  // Fallback empty
  return { images: toImagesMap(null) };
});

// Any items with at least one size?
const hasAnyImage = renderItems.some(ri => ri.images && (ri.images.xl || ri.images.large || ri.images.med || ri.images.small));
---

<div class="rowindex-1 service-area-banner">
  <div class="hw-contain flex-wrap tal service-area-banner-flex">
    <!-- LEFT: Title / Text / Form -->
    <div class="service-area-banner-half-text">
      <h1
        class="service-area-banner-title-half lilblur round-vw-lh"
        set:html={renderTitleHTML(splitLines(banner_title))}
      />

      {banner_text && (
        <div class="service-area-banner-desc round-vw-lh" set:html={banner_text} />
      )}

      <div class="service-area-banner-form-wrap banner-form-wrap">
        <div class="form-intro-text mb-8 tac">
          Get your <span class="dotted-underline inline-block c-redaccent">no-obligation</span> estimate by filling out&nbsp;the form:
        </div>

        <div class="banner-form-inner">
          {coerceId(gravity_forms_id) && (
            <GFForm
              formId={coerceId(gravity_forms_id)}
              wpBase={wpBase}
              showTitle={false}
              showDescription={false}
              theme="gravity-theme"
              ajax={false}
              viaProxy={true}
            />
          )}
        </div>
      </div>
    </div>

    <!-- RIGHT: Image stack (project overlays optional) -->
    <div class="service-area-banner-img-wrap">
      {hasAnyImage &&
        renderItems.map((ri, i) => {
          const hasImg = ri.images && (ri.images.xl || ri.images.large || ri.images.med || ri.images.small);

          if (!hasImg) return null;

          return (
            <div class="service-area-banner-image flex-wrap ofh pr" key={`sa-img-${i}`}>
              {(ri.overlayTitle || ri.overlayLocation) && (
                <div class="c-white abs-full proj-overlay-text flex-wrap tal">
                  <div>
                    {ri.overlayTitle && <h3 class="caps">{ri.overlayTitle}</h3>}
                    {ri.overlayLocation && <h4 class="icon-marker reg">{ri.overlayLocation}</h4>}
                  </div>
                </div>
              )}

              <SmartImage
                images={ri.images}
                sizes="(min-width: 1024px) 50vw, 100vw"
                alt=""              // overlay carries title/location; featured batch returns alt if you want to pass it into toImagesMap
                critical={i === 0}  // first one critical for LCP
                imgClass="service-area-banner-img abs obj-cover"
              />
            </div>
          );
        })
      }
    </div>
  </div>

  <script>
    // parity with legacy helper
    if (window?.HW?.setElementHeightVar) {
      window.HW.setElementHeightVar('.service-area-banner-title-half');
    }
  </script>
</div>

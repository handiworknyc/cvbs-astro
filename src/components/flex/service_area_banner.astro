---
// src/components/flex/service_area_banner.astro
/**
 * Pulls a service-area banner from WP, strips ALL Gravity Forms markup,
 * extracts GF form id from the WP markup, and injects Astro <GFForm /> instead.
 *
 * What we do:
 *  - Parse pulled HTML with cheerio
 *  - Find `.service-area-banner-form-wrap`
 *  - Inside it, locate the first <form> (WordPress GF form)
 *      • Extract formId from: id="gform_#", data-formid="#", or target="gform_ajax_frame_#"
 *  - Preserve ONLY `.form-intro-text` contents
 *  - Replace the entire wrapper with a placeholder marker
 *  - Render a clean `.service-area-banner-form-wrap` at that marker with:
 *      [intro html] + <GFForm formId={gfFormId ?? extracted} />
 */

import GFForm from "@/components/GFForm.astro";
import { fetchFlexText } from "../../lib/wp/pullFlexText";
import * as cheerio from "cheerio";

// ---------------------------------------------
// Types
// ---------------------------------------------
export type PullFrom = {
  objectType: "post" | "term";
  objectId?: number;
  taxonomy?: string;    // required if objectType === "term"
  field?: string;       // defaults to "flex_text"
  selector?: string;
  rowIndex?: number;    // 1-based
};

interface Props {
  // Pull context
  postId?: number | null;
  currentPost?: any;
  termId?: number | null;
  taxonomy?: string | null; // e.g., "service-area"

  // Section plumbing
  section_id?: string;
  wrapperClasses?: string;
  rowIndex?: number;

  // GF form to render (optional; if omitted we extract from WP form)
  gfFormId?: number;

  geo_keyword?: string;
}

// ---------------------------------------------
// Props
// ---------------------------------------------
const {
  postId = null,
  currentPost = null,
  termId = null,
  taxonomy = null,
  section_id = "",
  wrapperClasses = "",
  rowIndex = Astro.props.rowIndex as number | undefined,
  gfFormId = undefined,
  geo_keyword = "",
} = Astro.props as Props;

// ---------------------------------------------
// Pull from WP
// ---------------------------------------------
let pulledHtml = "";
let pullDebug: any = null;

let effectivePull: PullFrom | null = null;

if (termId && taxonomy) {
  effectivePull = {
    objectType: "term",
    objectId: termId,
    taxonomy: String(taxonomy),
    field: "flex_text",
    rowIndex,
  };
} else if (postId) {
  effectivePull = {
    objectType: "post",
    objectId: postId,
    field: "flex_text",
    rowIndex,
  };
}

if (effectivePull) {
  const pulled = await fetchFlexText(effectivePull);
  pulledHtml = pulled?.html || "";
  pullDebug = pulled || {};

  console.log("[service_area_banner] pull result:", {
    mode: effectivePull.objectType,
    taxonomy: effectivePull.taxonomy || null,
    objectId: effectivePull.objectId ?? null,
    status: pulled?.status,
    url: pulled?.url,
    error: pulled?.error,
    peek: pulled?.peek,
    htmlLen: pulledHtml.length,
  });
} else {
  console.warn("[service_area_banner] No valid pull context (need postId OR {termId,taxonomy}).", {
    postId,
    termId,
    taxonomy,
  });
}

// ---------------------------------------------
// Helpers
// ---------------------------------------------
function coerceInt(v?: string | null): number | null {
  if (!v) return null;
  const n = parseInt(String(v), 10);
  return Number.isFinite(n) && n > 0 ? n : null;
}

function extractGFormIdFromAttrs(formEl: cheerio.Cheerio<any>): number | null {
  // Try id="gform_1"
  const idAttr = formEl.attr("id"); // e.g., "gform_1"
  if (idAttr) {
    const m = idAttr.match(/gform_(\d+)/i);
    const n = coerceInt(m?.[1] || null);
    if (n) return n;
  }

  // Try data-formid="1"
  const dataId = formEl.attr("data-formid");
  const n2 = coerceInt(dataId || null);
  if (n2) return n2;

  // Try target="gform_ajax_frame_1"
  const targetAttr = formEl.attr("target");
  if (targetAttr) {
    const m2 = targetAttr.match(/gform_ajax_frame_(\d+)/i);
    const n3 = coerceInt(m2?.[1] || null);
    if (n3) return n3;
  }

  // As a last resort, look for hidden input "gform_submit" or "gform_unique_id" style hints
  const hiddenSubmit = formEl.find('input[name="gform_submit"], input[name="form_id"]')
    .first()
    .attr("value");
  const n4 = coerceInt(hiddenSubmit || null);
  if (n4) return n4;

  return null;
}

// ---------------------------------------------
// Process HTML: strip WP GF form, keep intro, re-insert <GFForm/>
// ---------------------------------------------
let introHtml = "";
let beforeHtml = "";
let afterHtml = "";
let didReplaceAtMarker = false;

// Will be set if we can extract from the pulled form
let extractedFormId: number | null = null;

if (pulledHtml) {
  try {
    // Parse as a fragment
    const $ = cheerio.load(pulledHtml, { decodeEntities: false });

    const $wrap = $(".service-area-banner-form-wrap").first();

    if ($wrap.length) {
      // Find first <form> within this wrapper (GF markup)
      const $form = $wrap.find("form").first();

      if ($form.length) {
        extractedFormId = extractGFormIdFromAttrs($form);
        console.log("[service_area_banner] Extracted GF form id:", extractedFormId);
      } else {
        console.log("[service_area_banner] No <form> found inside .service-area-banner-form-wrap.");
      }

      // Extract ONLY the intro HTML
      const $intro = $wrap.find(".form-intro-text").first();
      introHtml = $intro.length ? ($intro.html() ?? "") : "";

      // Replace the whole wrapper with a placeholder marker (we'll render our clean version there)
      const MARK = "<!--ASTRO_FORM_WRAP_MARK-->";
      $wrap.replaceWith(MARK);

      // Get processed HTML string (with marker)
      const processed = $.root().html() ?? "";

      const parts = processed.split("<!--ASTRO_FORM_WRAP_MARK-->");
      if (parts.length >= 2) {
        beforeHtml = parts[0];
        afterHtml = parts.slice(1).join("<!--ASTRO_FORM_WRAP_MARK-->"); // Support multiple just in case
        didReplaceAtMarker = true;
      } else {
        // Marker not found (unexpected): fallback to just removing the wrapper and append our form after all content.
        beforeHtml = processed;
        afterHtml = "";
      }
    } else {
      // No wrapper present; we won't modify pulledHtml
      beforeHtml = pulledHtml;
      afterHtml = "";
    }
  } catch (err) {
    console.error("[service_area_banner] Cheerio processing error:", err);
    // On error, fall back to raw
    beforeHtml = pulledHtml;
    afterHtml = "";
  }
}

// Final ID to use for GFForm:
const resolvedGfFormId: number | undefined =
  (gfFormId ?? extractedFormId ?? undefined);
---

{pulledHtml ? (
  <>
    {/* Part before the form wrapper (or entire doc if no wrapper) */}
    {beforeHtml && <Fragment set:html={beforeHtml} />}

    {/* Our clean replacement only if we found & replaced the wrapper */}
    {didReplaceAtMarker && (
      <div class="service-area-banner-form-wrap banner-form-wrap" data-astro-form-wrap data-source="astro">
        {/* Preserve ONLY the intro block's inner HTML */}
        {introHtml && <div class="form-intro-text tac mb2" set:html={introHtml} />}

        {/* Append Astro GFForm component using resolved id */}
        {resolvedGfFormId && (
          <div class="banner-form-inner">
            <GFForm
              formId={resolvedGfFormId}
              wpBase={import.meta.env.WP_BASE_URL || ""}
              showTitle={false}
              showDescription={false}
              theme="gravity-theme"
              ajax={false}
              viaProxy={true}
            />
          </div>
        )}
      </div>
    )}

    {/* Remaining part after the wrapper */}
    {afterHtml && <Fragment set:html={afterHtml} />}
  </>
) : (
  <section id={section_id} class={wrapperClasses} data-geo={geo_keyword}>
    <div>No pulled HTML – render local here.</div>

    {/* Visible debug panel for live Netlify troubleshooting */}
    <div style="margin-top:1rem; padding:1rem; border:1px dashed #c33; background:#fff3f3; font-family:monospace; font-size:.9rem;">
      <div><strong>WP_BASE_URL:</strong> {import.meta.env.WP_BASE_URL || "(not set)"} </div>
      <div><strong>mode:</strong> {termId && taxonomy ? "taxonomy" : postId ? "page" : "none"} </div>
      <div><strong>taxonomy:</strong> {String(taxonomy ?? "")}</div>
      <div><strong>termId:</strong> {String(termId ?? "")}</div>
      <div><strong>postId:</strong> {String(postId ?? "")}</div>
      <div><strong>rowIndex:</strong> {String(rowIndex ?? "")}</div>
      <div><strong>resolvedGfFormId:</strong> {String(resolvedGfFormId ?? "")}</div>
      {pullDebug && (
        <details open>
          <summary><strong>Pull Debug</strong></summary>
          <div><strong>status:</strong> {String(pullDebug.status ?? "")}</div>
          <div><strong>url:</strong> {String(pullDebug.url ?? "")}</div>
          <div><strong>error:</strong> {String(pullDebug.error ?? "")}</div>
          <div><strong>peek:</strong> {String(pullDebug.peek ?? "").slice(0, 300)}</div>
          <div><strong>raw keys:</strong> {pullDebug.raw ? Object.keys(pullDebug.raw).join(", ") : "(none)"} </div>
        </details>
      )}
    </div>
  </section>
)}

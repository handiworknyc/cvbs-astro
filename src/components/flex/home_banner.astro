---
/**
 * Home Banner (Astro) â€” with optional featured-image resolution
 * + Reusable Gravity Forms block via <GFForm />
 */
import SmartImage from '@ui/SmartImage.astro';
import { toImagesMap } from '@images';
import { enrichWithPrimaryTerms } from "src/lib/wp/taxonomy";
import GFForm from "@/components/GFForm.astro";

interface Img { src: string; alt?: string }

type RawRow = {
  post?: { ID?: number; post_title?: string } | null
  image_vertical_align?: string
  project_tag?: string
  project_location?: string
  [k: string]: any
}

type NormalizedRow = {
  projectId?: number
  image?: Img | null
  valign?: string
  logoSrc?: string | null
  title?: string
  tag?: string | null
  location?: string | null
}

type AnyRow = RawRow | NormalizedRow

const {
  gravity_forms_id,     // may be string from WP ("1")
  formHtml = "",
  projects = [] as AnyRow[],
  featuredSize = "intch_xl",
} = Astro.props as {
  gravity_forms_id?: string | number
  formHtml?: string
  projects?: AnyRow[]
  featuredSize?: string
};

// Coerce GF id safely
function coerceId(v: unknown): number | null {
  if (v == null || v === "") return null;
  const n = typeof v === "string" ? parseInt(v, 10) : Number(v);
  return Number.isFinite(n) && n > 0 ? n : null;
}
const gfFormId = coerceId(gravity_forms_id);

// Use your existing env vars. SSR has access to private env (no PUBLIC_ needed).
const WP_BASE =
  (import.meta.env.WP_BASE_URL as string | undefined) ||
  (import.meta.env.PUBLIC_WP_BASE_URL as string | undefined) ||
  "";

// ----- helpers (shape-agnostic) -----
const getId = (p: AnyRow) =>
  (p as RawRow)?.post?.ID ?? (p as NormalizedRow)?.projectId ?? null;

const getTitle = (p: AnyRow) =>
  (p as RawRow)?.post?.post_title ?? (p as NormalizedRow)?.title ?? "";

const getValign = (p: AnyRow) =>
  (p as RawRow)?.image_vertical_align ?? (p as NormalizedRow)?.valign ?? "center";

const getTag = (p: AnyRow) =>
  ((p as RawRow)?.project_tag ?? (p as NormalizedRow)?.tag ?? "").trim() || null;

const getLocation = (p: AnyRow) =>
  ((p as RawRow)?.project_location ?? (p as NormalizedRow)?.location ?? "").trim() || null;

const getLogo = (p: AnyRow) =>
  (p as NormalizedRow)?.logoSrc ?? null;

const getExistingImage = (p: AnyRow): Img | null => {
  const maybe = (p as NormalizedRow)?.image;
  return maybe?.src ? maybe : null;
};

// ----- tiny SSR timeout helper -----
async function fetchWithTimeout(input: any, init: any = {}, ms = 6000) {
  const ctrl = new AbortController();
  const id = setTimeout(() => ctrl.abort('timeout'), ms);
  try {
    return await fetch(input, { ...init, signal: ctrl.signal });
  } finally {
    clearTimeout(id);
  }
}

// Always resolve featured images for all projects
let featured: Record<number, { src: string; alt?: string; width?: number; height?: number } | null> = {};

if (projects.length && WP_BASE) {
  try {
    const base = WP_BASE.replace(/\/+$/, "");
    const url = new URL("/wp-json/astro/v1/featured/batch", base);
    url.searchParams.set("ids", projects.map(getId).filter(Boolean).join(","));
    url.searchParams.set("size", featuredSize);

    const res = await fetchWithTimeout(url.toString(), {}, 6000);
    if (res.ok) {
      featured = await res.json();
    }
  } catch (err) {
    featured = {};
    console.warn('[featured batch] failed:', err);
  }
}

const enriched = projects.map((p, i) => {
  const id = getId(p) || undefined;
  const existing = getExistingImage(p);
  const fallback = id ? featured[id] : null;
  const image: Img | null = existing?.src
    ? existing
    : (fallback && fallback.src ? { src: fallback.src, alt: fallback.alt || "" } : null);

  return {
    projectId: id,
    title: getTitle(p),
    valign: getValign(p),
    tag: getTag(p),
    location: getLocation(p),
    logoSrc: getLogo(p),
    image,
    __crit: i === 0,
  };
});

// ----- wrap taxonomy enrichment with timeout & fallback -----
let rows = enriched;
try {
  rows = await Promise.race([
    enrichWithPrimaryTerms(enriched, {
      tagTax: "service",
      locationTax: "service-area",
    }),
    new Promise((resolve) => setTimeout(() => resolve(enriched), 6000))
  ]) as typeof enriched;
} catch (err) {
  console.warn('[enrichWithPrimaryTerms] failed:', err);
  rows = enriched;
}
const hasProjects = rows.length > 0;
---

<div class="jsVhUnits100 pr flex-wrap home-banner-vhwrap" data-sal="fade">
  <div class="hw-contain flex-wrap tal">
    <h1 class="home-banner-title round-vw-lh lilblur">
      <span class="c-brandgreen lilblur green">the most trusted</span>
      <span class="inline-block">
        <span class="home-banner-word-slide">
          <span>commercial maintenance</span>
          <span>janitorial services</span>
          <span>office cleaning</span>
          <span>facility maintenance</span>
          <span>general contracting</span>
          <span>civil engineering</span>
        </span>
      </span>
      <br/>
      team in New York <br class="mob-break" /> &amp; the Tri-State area.
    </h1>
  </div>

  <div class="pr min-[1000px]:pt-[4.5rem] home-banner-slides">
    <!-- START .banner-form-wrap -->
    <div class="banner-form-wrap">
      <div class="form-intro-text mb-8 text-center">
        Get your <span class="dotted-underline inline-block c-redaccent">no-obligation</span> estimate by filling out&nbsp;the form:
      </div>

      <div class="banner-form-inner">
        {gfFormId && (
          <GFForm
            formId={gfFormId}
            wpBase={WP_BASE}
            showTitle={false}
            showDescription={false}
            theme="gravity-theme"
            ajax={false}
            viaProxy={true}
          />
        )}
      </div>

      <svg id="form-badge" width="163" height="163" viewBox="0 0 163 163" fill="none" xmlns="http://www.w3.org/2000/svg"><g filter="url(#filter0_d_324_12711)"><path d="M68.3151 14.5134C68.9465 13.689 70.1037 13.485 70.979 14.0437L76.3213 17.4537C77.0543 17.9216 78.0056 17.8622 78.6747 17.3069L83.5516 13.2589C84.3506 12.5958 85.5242 12.6543 86.2532 13.3938L90.7028 17.9071C91.3133 18.5264 92.254 18.6802 93.0299 18.2876L98.6852 15.4264C99.6117 14.9576 100.743 15.2759 101.289 16.159L104.623 21.5494C105.08 22.2889 105.963 22.6482 106.807 22.4381L112.957 20.9071C113.965 20.6562 114.997 21.2182 115.333 22.2007L117.383 28.1977C117.665 29.0206 118.445 29.5673 119.315 29.5503L125.652 29.4261C126.69 29.4058 127.571 30.1833 127.68 31.216L128.344 37.5189C128.436 38.3837 129.075 39.0905 129.927 39.2674L136.132 40.5564C137.149 40.7676 137.835 41.7217 137.711 42.7527L136.957 49.0455C136.853 49.9089 137.319 50.7403 138.11 51.1022L143.873 53.7397C144.817 54.1719 145.274 55.2547 144.924 56.2323L142.788 62.1995C142.495 63.0182 142.765 63.9325 143.455 64.4613L148.487 68.3151C149.311 68.9465 149.515 70.1037 148.956 70.979L145.546 76.3213C145.078 77.0543 145.138 78.0056 145.693 78.6747L149.741 83.5516C150.404 84.3506 150.346 85.5242 149.606 86.2532L145.093 90.7028C144.474 91.3133 144.32 92.2539 144.712 93.0299L147.574 98.6852C148.042 99.6117 147.724 100.743 146.841 101.289L141.451 104.623C140.711 105.08 140.352 105.963 140.562 106.807L142.093 112.957C142.344 113.965 141.782 114.997 140.799 115.333L134.802 117.383C133.979 117.665 133.433 118.445 133.45 119.315L133.574 125.652C133.594 126.69 132.817 127.571 131.784 127.68L125.481 128.344C124.616 128.436 123.909 129.075 123.733 129.927L122.444 136.132C122.232 137.149 121.278 137.835 120.247 137.711L113.954 136.957C113.091 136.853 112.26 137.319 111.898 138.11L109.26 143.873C108.828 144.817 107.745 145.274 106.768 144.924L100.8 142.788C99.9817 142.495 99.0675 142.765 98.5387 143.455L94.6849 148.487C94.0535 149.311 92.8963 149.515 92.021 148.956L86.6787 145.546C85.9457 145.078 84.9944 145.138 84.3252 145.693L79.4484 149.741C78.6494 150.404 77.4758 150.346 76.7468 149.606L72.2972 145.093C71.6867 144.474 70.746 144.32 69.9701 144.712L64.3148 147.574C63.3882 148.042 62.2571 147.724 61.7109 146.841L58.3772 141.451C57.9198 140.711 57.0369 140.352 56.1931 140.562L50.0429 142.093C49.0353 142.344 48.0033 141.782 47.6673 140.799L45.6167 134.802C45.3353 133.979 44.5545 133.433 43.6851 133.45L37.3484 133.574C36.3102 133.594 35.4292 132.817 35.3203 131.784L34.6555 125.481C34.5643 124.616 33.9247 123.909 33.0733 123.733L26.8678 122.444C25.8512 122.232 25.1652 121.278 25.2888 120.247L26.0433 113.954C26.1468 113.091 25.6805 112.26 24.8898 111.898L19.1268 109.26C18.1826 108.828 17.7262 107.745 18.0761 106.768L20.2119 100.8C20.5049 99.9817 20.2354 99.0675 19.545 98.5387L14.5134 94.6849C13.689 94.0535 13.485 92.8963 14.0437 92.021L17.4538 86.6787C17.9216 85.9457 17.8623 84.9943 17.3069 84.3252L13.259 79.4484C12.5958 78.6494 12.6543 77.4758 13.3938 76.7468L17.9072 72.2972C18.5264 71.6867 18.6802 70.746 18.2876 69.9701L15.4264 64.3148C14.9577 63.3882 15.2759 62.2571 16.159 61.7109L21.5494 58.3772C22.289 57.9198 22.6482 57.0369 22.4382 56.1931L20.9071 50.0429C20.6563 49.0353 21.2182 48.0033 22.2008 47.6673L28.1978 45.6167C29.0206 45.3353 29.5673 44.5545 29.5503 43.6851L29.4262 37.3484C29.4058 36.3102 30.1834 35.4292 31.216 35.3202L37.5189 34.6555C38.3837 34.5643 39.0905 33.9247 39.2674 33.0733L40.5564 26.8678C40.7676 25.8512 41.7217 25.1652 42.7527 25.2888L49.0455 26.0433C49.9089 26.1468 50.7403 25.6805 51.1022 24.8898L53.7397 19.1268C54.1719 18.1826 55.2547 17.7261 56.2323 18.0761L62.1995 20.2119C63.0182 20.5049 63.9325 20.2353 64.4613 19.545L68.3151 14.5134Z" fill="#FFBF00"></path></g><g clip-path="url(#clip0_324_12711)"><path d="M63.6117 130.289L60.7745 137.425L59.9382 137.093L58.2768 129.943L58.2071 129.916L55.9795 135.519L55.1153 135.176L57.9525 128.039L58.7888 128.371L60.4585 135.54L60.5282 135.568L62.7614 129.951L63.6117 130.289Z" fill="#24454B"></path><path d="M64.6484 138.634C64.1464 138.499 63.7383 138.26 63.424 137.919C63.1121 137.578 62.9081 137.164 62.8118 136.677C62.718 136.191 62.7488 135.661 62.9041 135.086C63.0607 134.507 63.3024 134.03 63.6291 133.655C63.9583 133.28 64.3434 133.024 64.7845 132.887C65.228 132.751 65.7008 132.75 66.2027 132.886C66.7047 133.022 67.1116 133.26 67.4235 133.601C67.7378 133.942 67.9415 134.357 68.0347 134.846C68.1303 135.335 68.0997 135.869 67.9431 136.449C67.7878 137.023 67.5459 137.496 67.2174 137.868C66.8913 138.241 66.5065 138.496 66.063 138.632C65.6219 138.769 65.1504 138.77 64.6484 138.634ZM64.8559 137.867C65.2372 137.97 65.5774 137.957 65.8764 137.828C66.1754 137.699 66.4271 137.492 66.6315 137.205C66.8359 136.918 66.9883 136.589 67.0888 136.218C67.1893 135.846 67.2238 135.484 67.1923 135.131C67.1609 134.778 67.0488 134.469 66.8562 134.205C66.6635 133.94 66.3765 133.756 65.9952 133.653C65.6139 133.55 65.2734 133.564 64.9738 133.696C64.6741 133.827 64.4217 134.037 64.2167 134.326C64.0117 134.615 63.8589 134.946 63.7584 135.317C63.6579 135.689 63.6237 136.05 63.6559 136.4C63.688 136.751 63.8007 137.057 63.994 137.319C64.1873 137.581 64.4746 137.764 64.8559 137.867Z" fill="#24454B"></path><path d="M78.2131 136.822C78.1317 137.628 77.9158 138.31 77.5655 138.867C77.2151 139.425 76.7702 139.837 76.2306 140.104C75.691 140.371 75.0954 140.472 74.4437 140.406C73.792 140.34 73.2285 140.123 72.7533 139.753C72.278 139.383 71.9246 138.89 71.6929 138.274C71.4612 137.657 71.386 136.946 71.4675 136.14C71.5489 135.334 71.7648 134.653 72.1151 134.095C72.4655 133.538 72.9104 133.125 73.45 132.858C73.9896 132.591 74.5852 132.49 75.2369 132.556C75.8886 132.622 76.4521 132.84 76.9273 133.209C77.4025 133.579 77.756 134.072 77.9877 134.689C78.2194 135.305 78.2946 136.016 78.2131 136.822ZM77.3177 136.732C77.3845 136.07 77.3303 135.5 77.1549 135.023C76.982 134.545 76.7196 134.171 76.3676 133.899C76.0181 133.628 75.6121 133.469 75.1494 133.422C74.6868 133.375 74.2559 133.45 73.8567 133.645C73.4599 133.842 73.1279 134.156 72.8605 134.589C72.5956 135.022 72.4298 135.569 72.3629 136.231C72.2961 136.892 72.3491 137.462 72.522 137.939C72.6973 138.417 72.9598 138.791 73.3092 139.063C73.6612 139.335 74.0685 139.494 74.5311 139.541C74.9938 139.587 75.4235 139.513 75.8202 139.317C76.2194 139.121 76.5515 138.806 76.8163 138.373C77.0837 137.94 77.2508 137.393 77.3177 136.732Z" fill="#24454B"></path><path d="M79.6971 140.64L79.5443 132.961L80.4292 132.944L80.4856 135.778L80.5605 135.777C80.6235 135.675 80.711 135.546 80.8229 135.389C80.9372 135.229 81.1019 135.086 81.3169 134.959C81.5344 134.83 81.8306 134.761 82.2055 134.754C82.6904 134.744 83.1203 134.857 83.495 135.092C83.8698 135.327 84.1653 135.665 84.3816 136.106C84.5979 136.546 84.7121 137.069 84.7241 137.674C84.7363 138.284 84.643 138.815 84.4445 139.266C84.2459 139.715 83.9653 140.066 83.6028 140.318C83.2402 140.568 82.8189 140.698 82.339 140.707C81.9691 140.715 81.6717 140.659 81.4468 140.541C81.2218 140.421 81.0478 140.283 80.9247 140.128C80.8015 139.97 80.7064 139.839 80.6393 139.736L80.5344 139.738L80.552 140.623L79.6971 140.64ZM80.5097 137.743C80.5183 138.178 80.5897 138.56 80.7238 138.89C80.8578 139.218 81.0492 139.473 81.2979 139.655C81.5465 139.835 81.8483 139.922 82.2032 139.915C82.5731 139.907 82.8799 139.804 83.1234 139.604C83.3695 139.401 83.5517 139.133 83.67 138.798C83.7908 138.46 83.8472 138.087 83.839 137.677C83.8309 137.272 83.7612 136.908 83.6298 136.586C83.5008 136.261 83.3094 136.006 83.0557 135.821C82.8044 135.633 82.4913 135.543 82.1164 135.551C81.7564 135.558 81.4558 135.655 81.2145 135.842C80.9731 136.027 80.7932 136.283 80.6747 136.611C80.5561 136.936 80.5011 137.313 80.5097 137.743Z" fill="#24454B"></path><path d="M86.1126 132.655L86.8207 140.302L85.9395 140.384L85.2314 132.736L86.1126 132.655Z" fill="#24454B"></path><path d="M88.5341 140.106L87.7704 134.397L88.6475 134.279L89.4113 139.989L88.5341 140.106ZM88.0891 133.386C87.9181 133.408 87.7629 133.37 87.6234 133.27C87.4864 133.17 87.407 133.038 87.3851 132.874C87.3632 132.711 87.4052 132.563 87.511 132.43C87.6193 132.297 87.759 132.219 87.93 132.196C88.1009 132.173 88.2549 132.212 88.3919 132.312C88.5314 132.412 88.6121 132.544 88.634 132.707C88.6558 132.871 88.6126 133.019 88.5043 133.152C88.3985 133.285 88.2601 133.363 88.0891 133.386Z" fill="#24454B"></path><path d="M93.7958 141.537C93.3771 141.624 93.0061 141.644 92.6827 141.599C92.3598 141.555 92.0801 141.468 91.8434 141.335C91.6097 141.205 91.4139 141.054 91.256 140.882L91.8464 140.255C91.9459 140.342 92.0694 140.439 92.2166 140.546C92.3644 140.656 92.5524 140.738 92.7807 140.793C93.012 140.85 93.2978 140.844 93.6382 140.773C94.0936 140.679 94.4466 140.492 94.6974 140.21C94.9482 139.929 95.0251 139.553 94.9281 139.083L94.6916 137.937L94.6182 137.952C94.5757 138.068 94.5114 138.214 94.4252 138.39C94.341 138.563 94.202 138.731 94.0084 138.894C93.8166 139.053 93.5372 139.171 93.1699 139.247C92.7145 139.341 92.2834 139.317 91.8766 139.177C91.4722 139.035 91.1223 138.781 90.8268 138.413C90.5338 138.045 90.3267 137.567 90.2054 136.979C90.0862 136.401 90.084 135.877 90.1988 135.407C90.3131 134.934 90.5271 134.542 90.841 134.233C91.1543 133.92 91.5485 133.715 92.0235 133.617C92.3908 133.541 92.6948 133.542 92.9355 133.62C93.1781 133.695 93.3729 133.798 93.5198 133.929C93.6687 134.056 93.7851 134.162 93.8689 134.247L93.9571 134.229L93.7721 133.333L94.6095 133.16L95.807 138.963C95.907 139.448 95.8782 139.864 95.7205 140.214C95.5657 140.565 95.3181 140.849 94.9777 141.068C94.6403 141.288 94.2463 141.444 93.7958 141.537ZM93.1268 138.444C93.4744 138.372 93.7518 138.232 93.9589 138.023C94.166 137.814 94.3012 137.548 94.3644 137.223C94.4276 136.899 94.4163 136.529 94.3304 136.112C94.2465 135.706 94.1113 135.36 93.9247 135.074C93.7381 134.788 93.5067 134.582 93.2304 134.455C92.954 134.329 92.6396 134.302 92.287 134.374C91.9198 134.45 91.6329 134.606 91.4265 134.843C91.2225 135.079 91.0916 135.367 91.0338 135.705C90.9785 136.043 90.9903 136.403 91.0691 136.785C91.15 137.177 91.2827 137.511 91.4672 137.787C91.6538 138.06 91.8859 138.257 92.1636 138.378C92.4434 138.497 92.7644 138.518 93.1268 138.444Z" fill="#24454B"></path><path d="M99.0723 137.973C98.7238 138.082 98.3871 138.115 98.0622 138.072C97.7365 138.027 97.451 137.905 97.2058 137.707C96.9599 137.506 96.7811 137.227 96.6694 136.869C96.5712 136.554 96.5536 136.279 96.6167 136.044C96.679 135.808 96.7965 135.601 96.9691 135.424C97.1418 135.247 97.3449 135.092 97.5784 134.959C97.8135 134.823 98.0535 134.698 98.2985 134.585C98.6192 134.438 98.88 134.321 99.081 134.235C99.2836 134.146 99.424 134.059 99.5024 133.974C99.5831 133.889 99.6023 133.778 99.5598 133.642L99.5509 133.613C99.4407 133.26 99.2585 133.016 99.0041 132.88C98.7522 132.744 98.4317 132.737 98.0427 132.858C97.6393 132.984 97.3506 133.171 97.1766 133.419C97.0026 133.667 96.9003 133.906 96.8697 134.135L95.9785 134.099C96.0175 133.72 96.1273 133.4 96.3079 133.14C96.4901 132.876 96.7117 132.663 96.9727 132.5C97.2353 132.335 97.505 132.209 97.7818 132.122C97.9584 132.067 98.168 132.025 98.4105 131.997C98.6547 131.965 98.9042 131.98 99.1592 132.042C99.4166 132.103 99.6575 132.242 99.8818 132.457C100.106 132.673 100.286 132.999 100.423 133.436L101.552 137.059L100.707 137.322L100.475 136.577L100.432 136.591C100.412 136.728 100.357 136.885 100.265 137.063C100.174 137.241 100.032 137.412 99.8403 137.577C99.6481 137.741 99.3921 137.874 99.0723 137.973ZM98.9645 137.174C99.2986 137.07 99.5597 136.917 99.7479 136.714C99.9385 136.51 100.06 136.287 100.112 136.042C100.167 135.798 100.158 135.561 100.087 135.332L99.8456 134.558C99.8232 134.612 99.7567 134.676 99.6462 134.75C99.5373 134.821 99.4082 134.894 99.2588 134.969C99.1111 135.041 98.9663 135.11 98.8243 135.175C98.6839 135.237 98.5702 135.289 98.4832 135.329C98.2726 135.426 98.0819 135.536 97.911 135.66C97.7418 135.781 97.6185 135.923 97.541 136.086C97.4651 136.246 97.4607 136.433 97.5277 136.648C97.6192 136.942 97.797 137.13 98.0611 137.212C98.3268 137.292 98.6279 137.279 98.9645 137.174Z" fill="#24454B"></path><path d="M102.997 130.278L103.276 130.974L100.506 132.086L100.226 131.39L102.997 130.278ZM100.52 129.785L101.341 129.456L103.385 134.551C103.479 134.783 103.582 134.943 103.696 135.032C103.811 135.118 103.93 135.159 104.052 135.156C104.176 135.149 104.299 135.122 104.419 135.073C104.51 135.037 104.582 135.003 104.637 134.97C104.69 134.935 104.733 134.907 104.765 134.886L105.228 135.557C105.18 135.6 105.111 135.653 105.02 135.713C104.929 135.777 104.807 135.839 104.654 135.9C104.422 135.994 104.175 136.035 103.912 136.024C103.652 136.013 103.407 135.935 103.179 135.789C102.953 135.643 102.778 135.414 102.653 135.103L100.52 129.785Z" fill="#24454B"></path><path d="M106.601 134.967L104.174 129.743L104.977 129.37L107.404 134.594L106.601 134.967ZM104.178 128.683C104.021 128.755 103.861 128.765 103.699 128.711C103.538 128.656 103.423 128.554 103.353 128.404C103.284 128.254 103.28 128.1 103.341 127.942C103.405 127.783 103.515 127.667 103.672 127.594C103.828 127.522 103.987 127.513 104.148 127.568C104.31 127.622 104.427 127.723 104.496 127.873C104.566 128.023 104.568 128.177 104.505 128.336C104.443 128.495 104.334 128.61 104.178 128.683Z" fill="#24454B"></path><path d="M111.018 132.867C110.562 133.118 110.103 133.231 109.64 133.204C109.179 133.176 108.745 133.021 108.337 132.738C107.931 132.453 107.584 132.051 107.297 131.53C107.006 131.005 106.848 130.494 106.822 129.997C106.798 129.499 106.897 129.047 107.119 128.642C107.342 128.236 107.682 127.907 108.137 127.655C108.592 127.403 109.05 127.292 109.511 127.32C109.974 127.346 110.409 127.503 110.816 127.789C111.225 128.075 111.575 128.48 111.865 129.005C112.153 129.526 112.308 130.034 112.331 130.53C112.356 131.025 112.256 131.475 112.033 131.882C111.811 132.287 111.473 132.615 111.018 132.867ZM110.633 132.171C110.979 131.98 111.214 131.734 111.339 131.434C111.465 131.133 111.501 130.809 111.449 130.461C111.396 130.113 111.277 129.77 111.091 129.433C110.904 129.096 110.677 128.812 110.409 128.58C110.141 128.348 109.846 128.204 109.524 128.148C109.201 128.092 108.867 128.16 108.522 128.351C108.176 128.542 107.941 128.789 107.817 129.092C107.693 129.394 107.658 129.721 107.711 130.071C107.765 130.421 107.885 130.765 108.071 131.102C108.257 131.439 108.484 131.722 108.751 131.952C109.018 132.181 109.312 132.323 109.633 132.377C109.954 132.431 110.287 132.362 110.633 132.171Z" fill="#24454B"></path><path d="M113.081 127.435L115.051 130.285L114.323 130.788L111.048 126.05L111.752 125.564L112.263 126.304L112.325 126.261C112.27 125.944 112.305 125.634 112.43 125.332C112.554 125.027 112.795 124.751 113.153 124.504C113.474 124.282 113.8 124.154 114.131 124.119C114.461 124.083 114.785 124.151 115.102 124.324C115.418 124.495 115.715 124.782 115.993 125.185L118.074 128.196L117.346 128.699L115.3 125.737C115.042 125.365 114.745 125.142 114.408 125.068C114.07 124.991 113.732 125.07 113.395 125.303C113.163 125.464 112.99 125.658 112.876 125.885C112.765 126.111 112.724 126.357 112.752 126.622C112.781 126.888 112.891 127.159 113.081 127.435Z" fill="#24454B"></path><path d="M115.279 120.563L118.7 124.895L118.025 125.443L114.487 121.206L115.279 120.563ZM119.762 126.893C119.619 127.009 119.454 127.058 119.267 127.039C119.081 127.019 118.929 126.938 118.813 126.794C118.696 126.65 118.648 126.485 118.667 126.299C118.686 126.113 118.768 125.961 118.911 125.845C119.055 125.728 119.22 125.679 119.406 125.699C119.593 125.718 119.744 125.799 119.861 125.943C119.938 126.038 119.985 126.145 120.001 126.264C120.019 126.382 120.008 126.497 119.968 126.61C119.928 126.72 119.859 126.814 119.762 126.893Z" fill="#24454B"></path><path d="M117.298 118.82L120.928 122.98L120.28 123.561L116.539 119.501L117.298 118.82ZM122.086 124.923C121.948 125.047 121.785 125.104 121.598 125.093C121.411 125.083 121.256 125.009 121.132 124.872C121.009 124.734 120.952 124.571 120.963 124.384C120.973 124.197 121.047 124.042 121.184 123.918C121.322 123.795 121.485 123.738 121.672 123.748C121.859 123.759 122.014 123.833 122.138 123.97C122.219 124.061 122.271 124.166 122.293 124.284C122.317 124.401 122.311 124.516 122.277 124.631C122.242 124.743 122.179 124.84 122.086 124.923Z" fill="#24454B"></path><path d="M119.233 116.976L123.061 120.953L122.443 121.565L118.507 117.693L119.233 116.976ZM124.313 122.837C124.182 122.967 124.022 123.032 123.835 123.031C123.648 123.03 123.489 122.963 123.359 122.832C123.229 122.7 123.164 122.541 123.165 122.354C123.166 122.166 123.232 122.007 123.364 121.877C123.495 121.747 123.655 121.683 123.842 121.684C124.03 121.685 124.188 121.751 124.318 121.883C124.405 121.97 124.462 122.072 124.489 122.188C124.519 122.303 124.519 122.419 124.49 122.536C124.461 122.649 124.402 122.749 124.313 122.837Z" fill="#24454B"></path><path d="M89.78 127.491C115.344 122.984 132.413 98.6058 127.906 73.0419C123.398 47.478 99.0204 30.4085 73.4565 34.9161C47.8926 39.4237 30.8231 63.8015 35.3307 89.3654C39.8383 114.929 64.2161 131.999 89.78 127.491Z" stroke="#24454B" stroke-miterlimit="10" stroke-dasharray="4.48 4.48"></path><path d="M47.7456 38.3317L48.5681 37.7285L49.9229 38.1299L50.2817 38.2387L52.3123 38.8514L51.4898 39.4547L50.1471 39.0443L49.8092 38.9387L47.7456 38.3317ZM49.8693 34.9882C50.3484 35.6413 50.6445 36.2922 50.7576 36.941C50.8707 37.5897 50.8162 38.1939 50.5943 38.7536C50.3723 39.3133 49.9972 39.7868 49.4691 40.1742C48.9409 40.5616 48.3766 40.7771 47.7761 40.8207C47.1756 40.8643 46.5829 40.7348 45.9981 40.432C45.4133 40.1293 44.8814 39.6513 44.4023 38.9982C43.9232 38.3451 43.6271 37.6941 43.514 37.0454C43.4009 36.3966 43.4554 35.7924 43.6773 35.2328C43.8993 34.6731 44.2744 34.1996 44.8025 33.8122C45.3307 33.4248 45.895 33.2093 46.4955 33.1656C47.096 33.122 47.6887 33.2516 48.2735 33.5543C48.8583 33.8571 49.3902 34.335 49.8693 34.9882ZM49.1436 35.5205C48.7503 34.9843 48.3286 34.5975 47.8786 34.3602C47.4306 34.1214 46.985 34.0189 46.5416 34.0527C46.1002 34.085 45.692 34.2387 45.3171 34.5137C44.9421 34.7887 44.672 35.1326 44.5066 35.5454C44.3432 35.9566 44.3071 36.4125 44.3983 36.913C44.4914 37.4121 44.7347 37.9297 45.128 38.4659C45.5213 39.0021 45.942 39.3896 46.39 39.6284C46.84 39.8657 47.2856 39.9682 47.727 39.9359C48.1704 39.9021 48.5796 39.7477 48.9545 39.4727C49.3295 39.1977 49.5986 38.8545 49.762 38.4432C49.9274 38.0305 49.9635 37.5746 49.8703 37.0755C49.7792 36.575 49.5369 36.0567 49.1436 35.5205Z" fill="#24454B"></path><path d="M55.1687 33.6743L53.4925 30.7104L54.2629 30.2748L57.0983 35.2885L56.328 35.7242L55.848 34.8755L55.7958 34.905C55.8223 35.2261 55.762 35.546 55.6148 35.8647C55.4664 36.1813 55.2029 36.4466 54.8242 36.6608C54.5109 36.838 54.1936 36.927 53.8723 36.9277C53.5498 36.9263 53.2402 36.8257 52.9434 36.6259C52.6454 36.4239 52.3757 36.1097 52.1345 35.6832L50.3328 32.4974L51.1032 32.0617L52.8753 35.1953C53.0821 35.5609 53.3493 35.7946 53.6769 35.8966C54.0067 35.9973 54.3315 35.9572 54.6514 35.7763C54.8429 35.668 55.01 35.5088 55.1526 35.2989C55.2975 35.0878 55.3801 34.8429 55.4006 34.5642C55.4232 34.2843 55.3459 33.9876 55.1687 33.6743Z" fill="#24454B"></path><path d="M58.0256 34.8851L55.544 29.6871L56.3427 29.3058L58.8242 34.5038L58.0256 34.8851ZM55.5365 28.6269C55.3808 28.7012 55.2213 28.7122 55.0579 28.6601C54.8967 28.6068 54.7806 28.5057 54.7095 28.3568C54.6384 28.2079 54.6328 28.0541 54.6927 27.8953C54.7549 27.7354 54.8638 27.6183 55.0195 27.5439C55.1752 27.4696 55.3336 27.4591 55.4948 27.5124C55.6582 27.5645 55.7755 27.6651 55.8465 27.814C55.9176 27.9629 55.9221 28.1173 55.8599 28.2772C55.8 28.436 55.6922 28.5525 55.5365 28.6269Z" fill="#24454B"></path><path d="M62.1445 33.2161C61.6424 33.4148 61.1631 33.4675 60.7066 33.3739C60.2501 33.2804 59.8419 33.0643 59.4819 32.7255C59.1219 32.3867 58.8361 31.95 58.6244 31.4154C58.4091 30.8715 58.319 30.3519 58.3541 29.8567C58.3907 29.3582 58.5426 28.9203 58.81 28.5429C59.0787 28.1622 59.4548 27.8762 59.9383 27.6848C60.3149 27.5357 60.6819 27.471 61.0393 27.4909C61.3967 27.5107 61.7215 27.6079 62.0138 27.7826C62.3062 27.9572 62.5418 28.2027 62.7208 28.519L61.898 28.8448C61.7386 28.6256 61.5135 28.4646 61.2228 28.362C60.9335 28.256 60.6075 28.2748 60.2449 28.4184C59.9242 28.5454 59.676 28.7404 59.5005 29.0035C59.3265 29.2633 59.2318 29.571 59.2167 29.9266C59.2029 30.2789 59.2761 30.6573 59.4362 31.0617C59.6 31.4755 59.8078 31.81 60.0594 32.0653C60.3134 32.3197 60.5937 32.4843 60.9003 32.5592C61.2092 32.6332 61.5264 32.6057 61.8518 32.4769C62.0656 32.3922 62.245 32.2782 62.3899 32.1348C62.5348 31.9914 62.64 31.826 62.7057 31.6387C62.7713 31.4514 62.7911 31.2499 62.7649 31.0344L63.5878 30.7087C63.6664 31.0432 63.6641 31.3735 63.5808 31.6996C63.4989 32.0224 63.3375 32.3175 63.0965 32.585C62.857 32.8493 62.5396 33.0596 62.1445 33.2161Z" fill="#24454B"></path><path d="M65.1931 29.7876L64.8732 28.7403L65.046 28.6901L66.7503 25.5239L67.8019 25.2184L65.9809 28.5747L65.9089 28.5956L65.1931 29.7876ZM64.9867 32.0344L62.844 24.6594L63.6939 24.4125L65.8366 31.7875L64.9867 32.0344ZM68.5014 31.0133L65.5456 28.9042L65.979 28.1379L69.5817 30.6995L68.5014 31.0133Z" fill="#24454B"></path><path d="M74.546 29.937C74.0458 30.0064 73.6022 29.9745 73.2153 29.8413C72.8283 29.7082 72.5149 29.4954 72.275 29.2031C72.0351 28.9108 71.8867 28.5591 71.8297 28.148C71.7858 27.831 71.8137 27.5407 71.9134 27.277C72.0153 27.0105 72.1705 26.7555 72.3791 26.5121C72.5898 26.2658 72.8364 26.0146 73.1189 25.7584L74.1051 24.7888C74.301 24.6178 74.4522 24.4429 74.5587 24.2641C74.6676 24.085 74.704 23.8654 74.668 23.6054C74.6412 23.4122 74.5299 23.2371 74.334 23.08C74.1405 22.9226 73.9064 22.8629 73.6315 22.901C73.4384 22.9277 73.2744 23.001 73.1395 23.1206C73.0068 23.2374 72.9088 23.3772 72.8455 23.5399C72.7844 23.6998 72.7648 23.859 72.7868 24.0175C72.8115 24.1958 72.8848 24.3699 73.0068 24.5397C73.1309 24.7068 73.2817 24.8752 73.4592 25.0449C73.6388 25.2119 73.8241 25.383 74.0149 25.5585L78.0975 29.3389L77.0426 29.4851L73.6783 26.4077C73.3663 26.1229 73.0831 25.8643 72.8288 25.632C72.5745 25.3997 72.3653 25.165 72.2012 24.9278C72.0371 24.6905 71.9344 24.4234 71.8932 24.1262C71.8459 23.7845 71.8799 23.4744 71.9953 23.1959C72.1128 22.9146 72.299 22.6831 72.554 22.5014C72.8111 22.3168 73.1253 22.1988 73.4968 22.1473C73.8781 22.0945 74.2165 22.1233 74.512 22.2338C74.8071 22.3418 75.0458 22.5069 75.228 22.7289C75.4099 22.9486 75.5204 23.1995 75.5595 23.4818C75.6099 23.8458 75.5633 24.1741 75.4196 24.4666C75.2759 24.7591 75.064 25.0421 74.7839 25.3156L73.4249 26.6549C73.1181 26.9548 72.9206 27.2321 72.8322 27.4866C72.7438 27.7412 72.7068 27.9204 72.7212 28.0244C72.7541 28.2622 72.8468 28.4752 72.9991 28.6636C73.1514 28.852 73.3489 28.9937 73.5918 29.0888C73.8346 29.1838 74.1071 29.2104 74.4092 29.1685C74.6965 29.1287 74.9679 29.0293 75.2235 28.8702C75.4787 28.7086 75.7004 28.4962 75.8885 28.2329C76.0792 27.9692 76.2162 27.665 76.2997 27.3203C76.3856 26.9752 76.4003 26.5984 76.3436 26.1898L77.1906 26.0724C77.2606 26.5776 77.2595 26.998 77.1874 27.3336C77.1153 27.6691 77.0187 27.9374 76.8976 28.1385C76.7766 28.3395 76.6777 28.4907 76.6009 28.5922C76.5763 28.6335 76.5542 28.6744 76.5346 28.715C76.515 28.7556 76.4929 28.7965 76.4683 28.8378C76.2613 29.1466 75.9802 29.395 75.6251 29.5831C75.2697 29.7686 74.91 29.8866 74.546 29.937Z" fill="#24454B"></path><path d="M81.2539 29.2352L81.3437 21.5558L85.9784 21.61L85.9688 22.4349L82.264 22.3916L82.2337 24.9864L85.6984 25.0269L85.6888 25.8519L82.224 25.8113L82.1935 28.4212L85.9582 28.4652L85.9486 29.2901L81.2539 29.2352Z" fill="#24454B"></path><path d="M88.1878 29.6738C87.8248 29.635 87.5028 29.5314 87.2215 29.3631C86.9406 29.1923 86.7271 28.967 86.581 28.6874C86.4351 28.4053 86.3821 28.0779 86.422 27.705C86.457 27.3768 86.5501 27.1178 86.7011 26.9277C86.8525 26.7352 87.0425 26.5921 87.2712 26.4984C87.5 26.4047 87.7479 26.3432 88.0151 26.3139C88.2849 26.2824 88.5547 26.2634 88.8244 26.2571C89.1772 26.2495 89.463 26.2461 89.6816 26.2469C89.903 26.2454 90.0665 26.2214 90.1721 26.1748C90.2801 26.1285 90.3417 26.0345 90.3568 25.8928L90.36 25.863C90.3993 25.4951 90.3292 25.1985 90.1496 24.9731C89.9725 24.748 89.6814 24.6138 89.2762 24.5705C88.8561 24.5256 88.5169 24.5824 88.2586 24.7409C88.0003 24.8993 87.8115 25.0778 87.6923 25.2762L86.8889 24.8886C87.0752 24.5566 87.3031 24.3069 87.5724 24.1395C87.8444 23.97 88.1325 23.8625 88.4365 23.817C88.7433 23.7694 89.0409 23.7609 89.3293 23.7918C89.5132 23.8114 89.7221 23.8564 89.956 23.9266C90.1926 23.9946 90.4156 24.1077 90.625 24.2659C90.8368 24.4243 91.0029 24.6469 91.1231 24.9338C91.2433 25.2207 91.279 25.5916 91.2304 26.0466L90.8272 29.8201L89.9472 29.726L90.0301 28.9504L89.9853 28.9457C89.9124 29.0636 89.7987 29.1859 89.6444 29.3128C89.49 29.4396 89.2919 29.5403 89.0501 29.6151C88.8083 29.6898 88.5209 29.7094 88.1878 29.6738ZM88.4065 28.8976C88.7545 28.9348 89.0551 28.8978 89.3084 28.7866C89.5641 28.6756 89.7644 28.5185 89.9094 28.3153C90.0568 28.1123 90.1432 27.8915 90.1687 27.6528L90.2548 26.8474C90.2127 26.8882 90.1263 26.9204 89.9956 26.9442C89.8675 26.9657 89.72 26.9813 89.5531 26.9912C89.3888 26.9987 89.2286 27.0042 89.0723 27.0077C88.9188 27.0089 88.7942 27.0106 88.6984 27.013C88.4665 27.0183 88.2475 27.044 88.0415 27.0898C87.8382 27.1335 87.6686 27.2147 87.5327 27.3334C87.3996 27.4499 87.3211 27.62 87.2972 27.8438C87.2645 28.1495 87.3529 28.3928 87.5624 28.5736C87.7746 28.7521 88.056 28.8602 88.4065 28.8976Z" fill="#24454B"></path><path d="M96.5785 26.4009L95.7548 26.4645C95.7319 26.3247 95.6851 26.1839 95.6142 26.0421C95.5462 25.8984 95.4395 25.7698 95.294 25.6563C95.1486 25.5429 94.9496 25.4607 94.6972 25.4098C94.3517 25.3402 94.0476 25.3619 93.7852 25.4748C93.5257 25.5857 93.3715 25.7625 93.3226 26.0051C93.2791 26.2208 93.3233 26.4069 93.4549 26.5635C93.5866 26.7201 93.8107 26.8736 94.1272 27.0241L94.9239 27.3988C95.4041 27.623 95.7425 27.8863 95.9392 28.1886C96.1363 28.4884 96.1952 28.8356 96.1157 29.2302C96.0505 29.5537 95.8991 29.8241 95.6615 30.0415C95.4264 30.2593 95.1286 30.4085 94.7681 30.4889C94.4076 30.5693 94.008 30.5653 93.5693 30.4769C92.9934 30.3609 92.5419 30.1399 92.2148 29.8138C91.8878 29.4878 91.7224 29.0745 91.7187 28.5739L92.5836 28.534C92.6008 28.8537 92.7032 29.1114 92.8907 29.3073C93.0806 29.5037 93.3533 29.6377 93.7087 29.7093C94.113 29.7908 94.4514 29.7697 94.7237 29.646C94.9989 29.5204 95.1609 29.3362 95.2098 29.0936C95.2493 28.8976 95.2138 28.7195 95.1032 28.5595C94.9931 28.3971 94.8026 28.2542 94.5316 28.1307L93.635 27.7206C93.1425 27.4939 92.8009 27.2274 92.6101 26.9212C92.4223 26.613 92.3676 26.2641 92.4461 25.8744C92.5103 25.5558 92.6565 25.292 92.8848 25.083C93.1156 24.8744 93.4006 24.7317 93.74 24.6547C94.0818 24.5782 94.4513 24.5799 94.8483 24.6599C95.4071 24.7725 95.8211 24.9834 96.0903 25.2926C96.362 25.6024 96.5247 25.9718 96.5785 26.4009Z" fill="#24454B"></path><path d="M96.5911 33.2736C96.4474 33.2307 96.3228 33.1804 96.2174 33.1228C96.1112 33.0676 96.0398 33.0227 96.0032 32.9883L96.4421 32.3054C96.6323 32.4197 96.8087 32.4932 96.971 32.5261C97.1334 32.559 97.2947 32.5302 97.4548 32.4398C97.6166 32.3524 97.7908 32.184 97.9776 31.9346L98.2645 31.5507L97.8817 25.3932L98.8015 25.6681L99.0106 30.5212L99.0681 30.5384L101.906 26.5959L102.826 26.8708L98.5931 32.4943C98.4025 32.7478 98.2014 32.9447 97.9899 33.085C97.7777 33.2277 97.5549 33.3138 97.3217 33.3433C97.0909 33.3734 96.8474 33.3502 96.5911 33.2736Z" fill="#24454B"></path><path d="M63.5049 84.3213C62.5973 84.4814 61.7595 84.4472 60.9913 84.2187C60.2336 83.9754 59.6015 83.5604 59.0951 82.9738C58.5992 82.3724 58.2756 81.6431 58.1245 80.7859L57.271 75.9454C57.1176 75.0756 57.1722 74.2797 57.4348 73.5575C57.71 72.8331 58.1631 72.2333 58.7942 71.7581C59.4356 71.2681 60.2102 70.943 61.1178 70.783C62.0254 70.623 62.8569 70.6583 63.6125 70.889C64.368 71.1197 64.9904 71.5169 65.4797 72.0805C65.9794 72.6292 66.2982 73.2944 66.436 74.0759L66.4726 74.2839C66.4949 74.41 66.443 74.4841 66.3169 74.5063L64.8799 74.7597C64.7538 74.782 64.6797 74.73 64.6574 74.604L64.6274 74.4338C64.4941 73.6775 64.1279 73.1117 63.5288 72.7364C62.9401 72.3463 62.2298 72.2246 61.3978 72.3713C60.5532 72.5202 59.9159 72.886 59.4857 73.4688C59.0682 74.0493 58.9317 74.7493 59.0762 75.5686L59.9497 80.5226C60.0942 81.342 60.4744 81.9508 61.0906 82.349C61.7067 82.7473 62.4433 82.8709 63.3005 82.7197C64.1325 82.573 64.7502 82.2431 65.1536 81.7301C65.5674 81.2022 65.7077 80.5601 65.5743 79.8038L65.3176 78.3478C65.3087 78.2974 65.279 78.2766 65.2286 78.2855L62.676 78.7356C62.5499 78.7579 62.4758 78.7059 62.4536 78.5799L62.2469 77.4076C62.2246 77.2815 62.2765 77.2074 62.4026 77.1851L66.657 76.435C66.783 76.4128 66.8572 76.4647 66.8794 76.5907L67.3028 78.9921C67.5584 80.4417 67.3392 81.6307 66.645 82.5589C65.9634 83.4849 64.9168 84.0724 63.5049 84.3213ZM77.5219 69.4697C77.5441 69.5957 77.4922 69.6699 77.3662 69.6921L70.6537 70.8757C70.6033 70.8846 70.5825 70.9142 70.5914 70.9647L71.3083 75.03C71.3171 75.0804 71.3468 75.1011 71.3972 75.0923L76.0108 74.2787C76.1369 74.2565 76.211 74.3084 76.2333 74.4345L76.4433 75.6257C76.4655 75.7518 76.4136 75.8259 76.2876 75.8481L71.6739 76.6616C71.6235 76.6705 71.6028 76.7002 71.6116 76.7506L72.3451 80.9104C72.354 80.9609 72.3837 80.9816 72.4341 80.9727L79.1466 79.7892C79.2726 79.7669 79.3468 79.8188 79.369 79.9449L79.579 81.1361C79.6013 81.2622 79.5493 81.3363 79.4233 81.3585L71.0091 82.8422C70.883 82.8644 70.8089 82.8125 70.7867 82.6864L68.5195 69.8288C68.4973 69.7027 68.5492 69.6286 68.6753 69.6064L77.0895 68.1227C77.2155 68.1005 77.2897 68.1524 77.3119 68.2785L77.5219 69.4697ZM88.201 66.1635C88.3271 66.1412 88.4012 66.1931 88.4235 66.3192L88.6368 67.5293C88.6591 67.6554 88.6072 67.7295 88.4811 67.7518L84.8507 68.3919C84.8003 68.4008 84.7795 68.4304 84.7884 68.4809L86.7955 79.8637C86.8177 79.9897 86.7658 80.0639 86.6398 80.0861L85.2027 80.3395C85.0767 80.3617 85.0025 80.3098 84.9803 80.1837L82.9732 68.8009C82.9643 68.7505 82.9347 68.7297 82.8842 68.7386L79.424 69.3488C79.298 69.371 79.2238 69.3191 79.2016 69.193L78.9882 67.9829C78.966 67.8568 79.0179 67.7827 79.144 67.7605L88.201 66.1635ZM104.8 76.884C104.686 76.904 104.602 76.8669 104.546 76.7728L103.475 74.6805C103.456 74.6449 103.427 74.6305 103.39 74.6371L98.0763 75.574C98.0385 75.5807 98.0166 75.604 98.0107 75.6441L97.7201 77.9764C97.7001 78.0839 97.6333 78.1476 97.5199 78.1676L95.9883 78.4377C95.8496 78.4621 95.787 78.4017 95.8004 78.2564L97.6708 64.6497C97.6908 64.5421 97.7576 64.4784 97.871 64.4584L99.7618 64.125C99.8753 64.105 99.9598 64.1421 100.015 64.2362L106.465 76.376L106.497 76.4483C106.512 76.5365 106.463 76.5906 106.35 76.6106L104.8 76.884ZM98.2034 73.9724C98.1952 73.9998 98.1996 74.025 98.2167 74.048C98.2441 74.0562 98.2704 74.0581 98.2957 74.0536L102.645 73.2868C102.67 73.2823 102.688 73.2727 102.698 73.2579C102.719 73.2282 102.721 73.2019 102.704 73.1789L99.2732 66.5507C99.2562 66.5277 99.2351 66.5184 99.2098 66.5229C99.1846 66.5273 99.168 66.5432 99.1598 66.5707L98.2034 73.9724Z" fill="#24454B"></path><path d="M59.6604 88.2782C60.5554 88.1204 61.3766 88.1706 62.124 88.4287C62.8691 88.6743 63.4897 89.0978 63.9857 89.6992C64.4816 90.3006 64.8074 91.0425 64.963 91.9249L65.8032 96.6898C66.0032 97.8243 65.8485 98.8264 65.339 99.696C64.842 100.564 64.0671 101.181 63.0142 101.549C62.966 101.57 62.9463 101.606 62.9552 101.657L63.2586 103.377C63.2808 103.503 63.2289 103.577 63.1028 103.6L61.6658 103.853C61.5398 103.875 61.4656 103.823 61.4434 103.697L61.14 101.977C61.1311 101.926 61.1003 101.899 61.0477 101.895C59.9325 101.91 58.9868 101.596 58.2105 100.953C57.4469 100.308 56.9651 99.4179 56.765 98.2834L55.9248 93.5185C55.7692 92.6362 55.8216 91.8276 56.082 91.0928C56.3424 90.358 56.7807 89.7478 57.3969 89.2623C58.0109 88.7641 58.7654 88.4361 59.6604 88.2782ZM63.1311 92.1504C62.9844 91.3184 62.6145 90.6948 62.0214 90.2795C61.4386 89.8493 60.7439 89.7054 59.9371 89.8476C59.1304 89.9899 58.5205 90.3639 58.1074 90.9696C57.7047 91.5605 57.5767 92.272 57.7234 93.1039L58.5769 97.9445C58.7236 98.7764 59.0883 99.4075 59.671 99.8376C60.2642 100.253 60.9641 100.389 61.7709 100.247C62.5776 100.105 63.1824 99.7384 63.5851 99.1475C63.9982 98.5417 64.1313 97.8229 63.9846 96.9909L63.1311 92.1504ZM73.6201 99.7761C72.6999 99.9383 71.8557 99.9052 71.0875 99.6767C70.3298 99.4334 69.6977 99.0185 69.1914 98.4319C68.6828 97.8327 68.3529 97.1045 68.2018 96.2473L66.6415 87.3982C66.6192 87.2722 66.6711 87.198 66.7972 87.1758L68.2342 86.9224C68.3603 86.9002 68.4344 86.9521 68.4567 87.0782L70.0237 95.9651C70.1681 96.7844 70.5432 97.4007 71.149 97.8137C71.7673 98.2246 72.4988 98.3556 73.3433 98.2067C74.1879 98.0577 74.8242 97.6856 75.2521 97.0903C75.68 96.4949 75.8217 95.7876 75.6772 94.9682L74.1102 86.0813C74.088 85.9552 74.1399 85.8811 74.266 85.8589L75.703 85.6055C75.8291 85.5832 75.9032 85.6352 75.9254 85.7612L77.4858 94.6103C77.6369 95.4675 77.576 96.2646 77.303 97.0016C77.0404 97.7237 76.5884 98.3298 75.947 98.8199C75.3159 99.2951 74.5403 99.6138 73.6201 99.7761ZM85.3254 97.7316C84.4052 97.8938 83.5588 97.8481 82.7862 97.5944C82.0136 97.3407 81.372 96.908 80.8612 96.2962C80.3481 95.6718 80.0127 94.9121 79.8549 94.0171L79.0614 89.5169C78.9036 88.6219 78.9601 87.7996 79.2308 87.05C79.5016 86.3004 79.9565 85.6743 80.5958 85.1717C81.235 84.669 82.0147 84.3366 82.9349 84.1743C83.8677 84.0098 84.7204 84.0545 85.493 84.3081C86.2656 84.5618 86.9073 84.9946 87.4181 85.6064C87.9289 86.2182 88.2632 86.9716 88.421 87.8666L89.2145 92.3667C89.3723 93.2617 89.317 94.0903 89.0485 94.8525C88.7777 95.6022 88.3227 96.2283 87.6835 96.7309C87.0443 97.2335 86.2582 97.5671 85.3254 97.7316ZM85.0487 96.1622C85.9059 96.0111 86.5525 95.6241 86.9886 95.0013C87.4247 94.3785 87.566 93.6322 87.4127 92.7624L86.6025 88.1677C86.4469 87.2853 86.0577 86.6261 85.4349 86.19C84.8099 85.7413 84.0688 85.5926 83.2116 85.7437C82.3545 85.8949 81.709 86.2881 81.2751 86.9235C80.8516 87.5441 80.7177 88.2956 80.8733 89.1779L81.6834 93.7727C81.8368 94.6424 82.2186 95.2965 82.8288 95.7348C83.4515 96.1709 84.1915 96.3133 85.0487 96.1622ZM98.6608 81.5574C98.7869 81.5352 98.861 81.5871 98.8832 81.7131L99.0966 82.9233C99.1188 83.0493 99.0669 83.1235 98.9409 83.1457L95.3105 83.7858C95.26 83.7947 95.2393 83.8244 95.2482 83.8748L97.2553 95.2576C97.2775 95.3837 97.2256 95.4578 97.0995 95.48L95.6625 95.7334C95.5364 95.7556 95.4623 95.7037 95.4401 95.5777L93.433 84.1949C93.4241 84.1444 93.3944 84.1237 93.344 84.1326L89.8838 84.7427C89.7577 84.7649 89.6836 84.713 89.6614 84.587L89.448 83.3768C89.4258 83.2508 89.4777 83.1766 89.6037 83.1544L98.6608 81.5574ZM110.14 80.9566C110.162 81.0826 110.11 81.1567 109.984 81.179L103.272 82.3626C103.221 82.3715 103.2 82.4011 103.209 82.4515L103.926 86.5168C103.935 86.5672 103.965 86.588 104.015 86.5791L108.629 85.7656C108.755 85.7434 108.829 85.7953 108.851 85.9214L109.061 87.1126C109.083 87.2386 109.032 87.3128 108.906 87.335L104.292 88.1485C104.241 88.1574 104.221 88.1871 104.23 88.2375L104.963 92.3973C104.972 92.4477 105.002 92.4685 105.052 92.4596L111.765 91.276C111.891 91.2538 111.965 91.3057 111.987 91.4318L112.197 92.623C112.219 92.749 112.167 92.8232 112.041 92.8454L103.627 94.3291C103.501 94.3513 103.427 94.2994 103.405 94.1733L101.137 81.3157C101.115 81.1896 101.167 81.1155 101.293 81.0932L109.707 79.6096C109.833 79.5874 109.908 79.6393 109.93 79.7653L110.14 80.9566Z" fill="#24454B"></path></g><defs><filter id="filter0_d_324_12711" x="1.79785" y="1.79785" width="159.404" height="159.404" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix><feOffset></feOffset><feGaussianBlur stdDeviation="5.5"></feGaussianBlur><feComposite in2="hardAlpha" operator="out"></feComposite><feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"></feColorMatrix><feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_324_12711"></feBlend><feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_324_12711" result="shape"></feBlend></filter><clipPath id="clip0_324_12711"><rect width="123.725" height="123.725" fill="white" transform="translate(9.61279 31.0834) rotate(-10)"></rect></clipPath></defs></svg>

    </div>
    <!-- END .banner-form-wrap -->

    <div class="pr img-load-par home-banner-slides-inner first-slide-load">
      {/* Slides: full-bleed images */}
      {hasProjects && rows.map((p) => {
        const crit = p.__crit;
        const valign = (p.valign || "center").trim();
        const img = p.image;
        const cls = `crit-${crit} ${valign} home-img-slide abs-full`;

        const entry = (p.projectId && featured[p.projectId])
          ? featured[p.projectId]
          : (img?.src ? { sizes: { xl: img.src } } : null);

        const images = toImagesMap(entry);

        return (
          <div class={cls} aria-hidden={!crit}>
            {(images.xl || images.large || images.med || images.small) && (
              <SmartImage
                images={images}
                sizes="100vw"
                alt={img?.alt || ""}
                critical={crit}
                imgClass={`img-full-image abs obj-cover zindex0 tr-fix ${crit ? "" : "postload"}`}
              />
            )}
          </div>
        );
      })}

      {/* Slide info overlay */}
      <div class="slide-info-wrap">
        <div class="slide-info-inner">
          {hasProjects && rows.map((p) => (
            <div class="slide-info-item flex-wrap abs-full">
              {p.logoSrc && <img data-src={p.logoSrc} class="slide-info-logo" alt="" />}
              <div class="slide-info-title">
                {p.tag && <div class="slide-info-tag outline-tag clash">{p.tag}</div>}
                {p.title && <h2 class="ls-5">{p.title}</h2>}
                {p.location && <div class="slide-info-location icon-marker">{p.location}</div>}
              </div>
            </div>
          ))}
        </div>

        <nav class="slides-nav flex-wrap align-items-center" aria-label="Slide navigation">
          <div class="clash c-white feat-projects-eyebrow">Featured Projects</div>
          <button class="home-banner-next icon-arrow-right" aria-label="Next slide"></button>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>
    const gsap = window.gsap;
    const ScrollTrigger = window.ScrollTrigger;
    
    function initMaskRevealSlider(){
        const container = document.querySelector('.home_banner-module');
        if (!container) return;
    
        const slides = Array.from(container.querySelectorAll('.home-banner-slides .home-img-slide')),
            infos  = Array.from(container.querySelectorAll('.slide-info-item')); // may be 0+
    
        if (slides.length < 2) return;
    
        // baseline image stack
        gsap.set(slides, { position: 'absolute', inset: 0, zIndex: 1 });
    
        // baseline info state
        if (infos.length) {
            gsap.set(infos, { position: 'absolute', inset: 0, autoAlpha: 0 });
            gsap.set(infos[0], { autoAlpha: 1 });
        }
    
        const DURATION = 1.5,
            HOLD     = 4.5,
            FEATHER  = '1.9%',
            EPS      = 0.0001,
            VISUAL_UNLOCK_LEAD = 1; 
    
        const tl = gsap.timeline({ paused: true, repeat: -1 });
        let activeIndex = 0,
            wipeActive  = false;
    
        for (let i = 0; i < slides.length; i++) {
            const idx = i,
                curr = slides[idx],
                next = slides[(idx + 1) % slides.length],
                currInfo = infos.length ? infos[idx % infos.length] : null,
                nextInfo = infos.length ? infos[(idx + 1) % infos.length] : null;
    
            // label at the START of this slide's cycle
            tl.addLabel(`slide-${idx}`);
    
            // pre-stack pair and prep mask just-in-time
            tl.add(() => {
                activeIndex = idx;
    
                slides.forEach(s => {
                    s.classList.remove('is-wiping');
                    gsap.set(s, { zIndex: 1 });
                });
                gsap.set(next, { zIndex: 2, clearProps: 'maskImage,webkitMaskImage' }); // visible underneath
                gsap.set(curr, { zIndex: 3 });                                          // top (masked)
                curr.classList.add('is-wiping');
                gsap.set(curr, { '--feather': FEATHER, '--cut': '-5%' });
    
                // ensure next info starts hidden, current visible, before the crossfade
                if (currInfo && nextInfo) {
                    gsap.set(nextInfo, { autoAlpha: 0 });
                    gsap.set(currInfo, { autoAlpha: 1 });
                }
            });
    
            // dwell
            tl.to({}, { duration: HOLD });
    
            // wipe + info crossfade in perfect sync
            tl.addLabel(`wipe-${idx}`);
    
            // mark wipe active right at the wipe label
            tl.call(() => {
                wipeActive = true;
                if (nextBtn) {
                    nextBtn.disabled = true;
                    nextBtn.setAttribute('aria-disabled', 'true');
                    nextBtn.classList.add('is-busy');
                }
            }, null, `wipe-${idx}`);
            
            // remove visual busy state a bit before the wipe ends (still disabled)
            const unlockAt = Math.max(0, VISUAL_UNLOCK_LEAD);
            tl.call(() => {
                if (nextBtn) nextBtn.classList.remove('is-busy');
            }, null, `wipe-${idx}+=${unlockAt}`);
            
    
            tl.to(curr, { '--cut': '105%', duration: DURATION, ease: 'power3.out' }, `wipe-${idx}`);
    
            if (currInfo && nextInfo) {
                tl.to(currInfo, { autoAlpha: 0, duration: .5, ease: 'power2.out' }, `wipe-${idx}`);
                tl.to(nextInfo, { delay: .17, autoAlpha: 1, duration: 1.6, ease: 'power2.inOut' }, `wipe-${idx}-=0.2`);
            }
    
            // cleanup for this step
            tl.add(() => {
                curr.classList.remove('is-wiping');
                gsap.set(curr, { zIndex: 1, '--cut': '0%' });
                wipeActive = false;
                
                if (nextBtn) {
                    nextBtn.disabled = false;
                    nextBtn.setAttribute('aria-disabled', 'false');
                    nextBtn.classList.remove('is-busy');
                }
            });
        }
    
        // only play while banner is in view
        if (window.ScrollTrigger) {
            ScrollTrigger.create({
                trigger: container,
                start: 'top 80%',
                end: 'bottom 20%',
                onEnter: () => tl.play(),
                onEnterBack: () => tl.play(),
                onLeave: () => tl.pause(),
                onLeaveBack: () => tl.pause()
            });
        } else {
            // fallback if ScrollTrigger isn't loaded
            tl.play();
        }

        $$('.first-slide-load')[0].classList.remove('first-slide-load');

        // ---- NEXT ARROW ----
        let nextBtn = container.querySelector('.home-banner-next');
        if (!nextBtn) {
            nextBtn = document.createElement('button');
            nextBtn.type = 'button';
            nextBtn.className = 'home-banner-next';
            nextBtn.setAttribute('aria-label', 'Next slide');
            nextBtn.innerHTML = 'â€º';
            container.appendChild(nextBtn);
        }
    
        // Jump to the wipe of the current slide; if weâ€™re already past it, jump to next slideâ€™s wipe.
        // Block interaction while a wipe is active.
        nextBtn.addEventListener('click', () => {
            if (wipeActive) return;
    
            const wipeNowLabel  = `wipe-${activeIndex}`,
                nextIndex     = (activeIndex + 1) % slides.length,
                wipeNextLabel = `wipe-${nextIndex}`,
                wipeNowTime   = tl.labels[wipeNowLabel],
                wipeNextTime  = tl.labels[wipeNextLabel],
                now           = tl.time();
    
            if (wipeNowTime == null || wipeNextTime == null) return;
    
            if (now >= wipeNowTime - EPS) {
                tl.play(wipeNextLabel);
            } else {
                tl.play(wipeNowLabel);
            }
    
            // proactively lock until timeline callback flips it off
            wipeActive = true;
            nextBtn.disabled = true;
            nextBtn.setAttribute('aria-disabled', 'true');
            nextBtn.classList.add('is-busy');
        });
    
        // optional keyboard support
        if (!container.hasAttribute('tabindex')) container.tabIndex = 0;
        container.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight') {
                e.preventDefault();
                nextBtn.click();
            }
        });
    }

    initMaskRevealSlider();






		const slides = gsap.utils.toArray('.home-banner-word-slide > span');
				
			gsap.set(slides, {
				autoAlpha: 0,
				yPercent: 100,
				rotationX: -30,
				rotationY: -4,
				rotationZ: 0.01,                        // stabilize text
				scale: 0.98,
				zIndex: 1,
				transformOrigin: '50% 100% -0.01px',
				force3D: true
			});
			gsap.set(slides[0], {
				autoAlpha: 1,
				yPercent: 0,
				rotationX: 0,
				rotationY: 0,
				rotationZ: 0.01,
				scale: 1,
				zIndex: 2
			});
			
			const hold = .8, durOut = 1.2, durIn = 0.6;
			const tl = gsap.timeline({
				repeat: -1,
				defaults: { ease: 'expo.inOut', overwrite: 'auto' }
			});
			
			slides.forEach((cur, i) => {
				const next = slides[(i + 1) % slides.length];
			
				tl.to({}, { duration: hold }) // show current only
					.to(cur, {
						autoAlpha: 0,
						yPercent: -100,
						rotationX: 30,
						rotationY: 3,
						rotationZ: 0.01,
						scale: 0.96,
						transformOrigin: '50% 0% -0.01px',
						duration: durOut,
						ease: 'power4.in'
					})
					.set(cur, {
						yPercent: 100,
						rotationX: -30,
						rotationY: -4,
						rotationZ: 0.01,
						scale: 0.98,
						zIndex: 1,
						transformOrigin: '50% 100% -0.01px'
					})
					.set(next, { zIndex: 2 }) // bring next above before animating
					.fromTo(next,
						{
							autoAlpha: 0,
							yPercent: 100,
							rotationX: -20,
							rotationY: -2,
							rotationZ: 0.01,
							scale: 1.02,
							transformOrigin: '50% 100% -0.01px'
						},
						{
							autoAlpha: 1,
							yPercent: 0,
							rotationX: 0,
							rotationY: 0,
							rotationZ: 0.01,
							scale: 1,
							duration: durIn,
							immediateRender: false
						},
						'>' // no overlap
					);
			});
			
</script>

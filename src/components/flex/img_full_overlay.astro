---
import { fetchFlexText } from "../../lib/wp/pullFlexText";

// Log incoming props on the server
console.log("[project_slider] Astro.props:", Astro.props);

// Pull type
export type PullFrom = {
  objectType: "post" | "term";
  objectId?: number;
  taxonomy?: string;    // required when objectType === "term"
  field?: string;       // defaults to "flex_text"
  selector?: string;    // e.g. "#why-clearview"
  rowIndex?: number;
};

interface Props {
  // Page context
  postId?: number | null;
  currentPost?: any;

  // Taxonomy context
  termId?: number | null;
  taxonomy?: string | null;

  // Misc
  section_id?: string;
  wrapperClasses?: string;
  geo_keyword?: string;
  rowIndex?: number;
}

const {
  postId = null,
  currentPost = null, // not used directly here but kept for symmetry
  termId = null,
  taxonomy = null,
  section_id = "",
  wrapperClasses = "",
  geo_keyword = "",
  rowIndex = Astro.props.rowIndex as number | undefined,
} = Astro.props as Props;

let pulledHtml = "";
let pullDebug: any = null;

// Decide the pull source:
// 1) If we have a taxonomy term context, pull as term
// 2) Else if we have a postId, pull as post
let effectivePull: PullFrom | null = null;

if (termId && taxonomy) {
  effectivePull = {
    objectType: "term",
    objectId: termId,
    taxonomy: String(taxonomy),
    field: "flex_text",
    rowIndex,
  };
} else if (postId) {
  effectivePull = {
    objectType: "post",
    objectId: postId,
    field: "flex_text",
    rowIndex,
  };
}

if (effectivePull) {
  const pulled = await fetchFlexText(effectivePull);
  pulledHtml = pulled?.html || "";
  pullDebug = pulled || {};

  console.log("[project_slider] pull result:", {
    mode: effectivePull.objectType,
    taxonomy: effectivePull.taxonomy || null,
    objectId: effectivePull.objectId ?? null,
    status: pulled?.status,
    url: pulled?.url,
    error: pulled?.error,
    peek: pulled?.peek,
    htmlLen: pulledHtml.length,
  });
} else {
  console.warn("[project_slider] No valid pull context (need postId OR {termId,taxonomy}).", {
    postId,
    termId,
    taxonomy,
  });
}
---

{pulledHtml ? (
  <Fragment set:html={pulledHtml} />
) : (
  <section id={section_id} class={wrapperClasses} data-geo={geo_keyword}>
    <div>No pulled HTML â€“ render local here.</div>

    {/* Visible debug panel for live Netlify troubleshooting */}
    <div style="margin-top:1rem; padding:1rem; border:1px dashed #c33; background:#fff3f3; font-family:monospace; font-size:.9rem;">
      <div><strong>WP_BASE_URL:</strong> {import.meta.env.WP_BASE_URL || "(not set)"} </div>
      <div><strong>mode:</strong> {termId && taxonomy ? "taxonomy" : postId ? "page" : "none"} </div>
      <div><strong>taxonomy:</strong> {String(taxonomy ?? "")}</div>
      <div><strong>termId:</strong> {String(termId ?? "")}</div>
      <div><strong>postId:</strong> {String(postId ?? "")}</div>
      <div><strong>rowIndex:</strong> {String(rowIndex ?? "")}</div>
      {pullDebug && (
        <details open>
          <summary><strong>Pull Debug</strong></summary>
          <div><strong>status:</strong> {String(pullDebug.status ?? "")}</div>
          <div><strong>url:</strong> {String(pullDebug.url ?? "")}</div>
          <div><strong>error:</strong> {String(pullDebug.error ?? "")}</div>
          <div><strong>peek:</strong> {String(pullDebug.peek ?? "").slice(0, 300)}</div>
          <div><strong>raw keys:</strong> {pullDebug.raw ? Object.keys(pullDebug.raw).join(", ") : "(none)"} </div>
        </details>
      )}
    </div>
  </section>
)}

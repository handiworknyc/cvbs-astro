---
/**
 * src/components/blog.astro
 * Fetch latest posts, optionally filtered by a custom taxonomy term.
 * Strategy:
 *  - If taxonomy provided:
 *      Try GraphQL taxQuery (needs taxonomy registered in WPGraphQL).
 *      If that fails, fallback to REST: /wp-json/wp/v2/posts?{tax}={term_id or slug}&_embed
 *  - Else: plain latest posts via GraphQL.
 */

import BlogPrevItem from "@/components/BlogPrevItem.astro";
import { fetchAPI } from "@/lib/wp";            // your auth-aware GraphQL fetch
import { getEnv, toBase64 } from "@/lib/env.ts"; // ← reuse shared helpers

// Prefer server-only env (PUBLIC_* is fine too if you already expose it)
const WP_BASE = import.meta.env.WP_BASE_URL || import.meta.env.PUBLIC_WP_BASE || "";

// Build Basic Auth header (same pattern used elsewhere)
const WP_AUTH_BASIC = getEnv("WP_AUTH_BASIC") || ""; // "user:pass"
const authHeaders = WP_AUTH_BASIC
  ? { Authorization: `Basic ${toBase64(WP_AUTH_BASIC)}` }
  : {};
 
// Types
type ImageMap = Record<string, string>;
interface ImageLike { src?: string; alt?: string; sizes?: ImageMap }
interface PostLike {
  id?: number | string;
  title?: string;
  date?: string;
  dateISO?: string;
  excerpt?: string;
  permalink?: string;
  image?: ImageLike | null;
}
interface TaxTerm { taxonomy: string; term_id: number; name?: string; slug?: string }

interface Props {
  taxonomy?: TaxTerm[];   // e.g. [{ taxonomy: "service", term_id: 7, name: "Facility Maintenance", slug:"facility-maintenance" }]
  idPrefix?: string;
  perPage?: number;
}

const {
  taxonomy = [],
  idPrefix = "blog-prev-wrap",
  perPage = 6,
} = Astro.props as Props;

// Pull first taxonomy (if any)
const tx = Array.isArray(taxonomy) && taxonomy.length ? taxonomy[0] : null;
const hasTax = !!tx;
const taxName = tx?.name || "";
const taxSlug = tx?.slug || "";      // preferred for WPGraphQL/REST by slug
const taxId   = tx?.term_id ?? null; // REST fallback by id
const taxKey  = tx?.taxonomy || "";  // e.g. "service"

// --- GraphQL: latest posts (no filter) ---
const GQL_LATEST = /* GraphQL */ `
  query BlogLatest($first:Int!) {
    posts(first: $first, where: { orderby: { field: DATE, order: DESC } }) {
      nodes {
        databaseId
        title
        date
        uri
        excerpt
        categories { nodes { name uri } }
        tags { nodes { name uri } }
        featuredImage {
          node {
            sourceUrl
            srcSet
            altText
            mediaDetails { width height }
          }
        }
      }
    }
  }
`;

// --- GraphQL: filtered by custom taxonomy (requires WPGraphQL taxonomy enum) ---
const GQL_BY_TAX = /* GraphQL */ `
  query PostsByTax($first:Int!, $tax: TaxonomyEnum!, $term: [String]) {
    posts(first: $first, where: {
      taxQuery: {
        taxArray: [
          { taxonomy: $tax, terms: $term, field: SLUG, operator: IN }
        ]
      },
      orderby: { field: DATE, order: DESC }
    }) {
      nodes {
        databaseId
        title
        date
        uri
        excerpt
        featuredImage {
          node {
            sourceUrl
            srcSet
            altText
            mediaDetails { width height }
          }
        }
      }
    }
  }
`;

// Helper: map GraphQL node → PostLike
function toPostLike(n: any): PostLike {
  const img = n?.featuredImage?.node;
  const sizes: ImageMap = {};
  if (img?.srcSet) {
    for (const part of String(img.srcSet).split(",")) {
      const [u, w] = part.trim().split(" ");
      if (u && w) sizes[w] = u;
    }
  }
  return {
    id: n?.databaseId ?? n?.id,
    title: n?.title ?? "",
    date: n?.date ?? "",
    dateISO: n?.date ?? "",
    excerpt: n?.excerpt ?? "",
    permalink: n?.uri ?? "#",
    image: img ? { src: img.sourceUrl, alt: img.altText || "", sizes } : null,
  };
}

// Helper: REST _embed → PostLike
function fromRestPost(p: any): PostLike {
  const media = p?._embedded?.["wp:featuredmedia"]?.[0];
  const src = media?.source_url || null;
  return {
    id: p?.id,
    title: p?.title?.rendered ?? "",
    date: p?.date ?? "",
    dateISO: p?.date ?? "",
    excerpt: p?.excerpt?.rendered ?? "",
    permalink: p?.link ?? "#",
    image: src ? { src, alt: media?.alt_text || "" } : null,
  };
}

// Try to build a GraphQL taxonomy enum from a slug like "service" -> "SERVICE"
function toTaxEnum(taxonomy: string): string {
  return taxonomy.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
}

let latestPosts: PostLike[] = [];

// Debug holders for REST fallback
let restUrl = "";
let restStatus: number | null = null;
let restPeek = "";
let restError: string | null = null;

try {
  if (hasTax && taxKey && (taxSlug || Number.isFinite(taxId))) {
    // 1) Try GraphQL taxQuery first
    const taxEnum = toTaxEnum(taxKey); // e.g. SERVICE
    try {
      const data = await fetchAPI(GQL_BY_TAX, { first: perPage, tax: taxEnum, term: [taxSlug] });
      const nodes = data?.posts?.nodes ?? [];
      latestPosts = nodes.map(toPostLike);
    } catch (err: any) {
      console.warn("[blog.astro] GraphQL taxQuery failed; falling back to REST:", err?.message || err);

      // 2) Fallback to REST if WPGraphQL taxQuery fails (taxonomy not in WPGraphQL, wrong enum, etc.)
      if (!WP_BASE) {
        console.warn("[blog.astro] No WP_BASE set; cannot REST fallback.");
        latestPosts = [];
      } else {
        restUrl = taxId
          ? `${WP_BASE}/wp-json/wp/v2/posts?${encodeURIComponent(taxKey)}=${encodeURIComponent(String(taxId))}&per_page=${perPage}&_embed`
          : `${WP_BASE}/wp-json/wp/v2/posts?${encodeURIComponent(taxKey)}=${encodeURIComponent(taxSlug)}&per_page=${perPage}&_embed`;

        try {
          const res = await fetch(restUrl, {
            headers: {
              Accept: "application/json",
              ...authHeaders, // ← add Basic Auth for protected prod WP
            },
          });
          restStatus = res.status;

          if (!res.ok) {
            restPeek = (await res.text().catch(() => ""))?.slice(0, 300) || "";
            console.error("[blog.astro] REST HTTP", restStatus, restUrl, restPeek);
            latestPosts = [];
          } else {
            const arr = await res.json();
            latestPosts = Array.isArray(arr) ? arr.map(fromRestPost) : [];
          }
        } catch (e: any) {
          restError = e?.message || String(e);
          console.error("[blog.astro] REST fetch error", restError, { url: restUrl });
          latestPosts = [];
        }
      }
    }
  } else {
    // No taxonomy provided → plain latest posts via GraphQL
    const data = await fetchAPI(GQL_LATEST, { first: perPage });
    const nodes = data?.posts?.nodes ?? [];
    latestPosts = nodes.map(toPostLike);
  }
} catch (e: any) {
  console.error("[blog.astro] fetch failed:", e?.message || e);
  latestPosts = [];
}

// Render
const count = latestPosts.length;
const uniq = `${idPrefix}-${Math.random().toString(36).slice(2, 10)}`;
const countClass = `count-${count}`;
---

{/* If nothing came back, show a debug panel on the page for live diagnosis */}
{count === 0 && (
  <div style="margin:1rem auto; max-width:64rem; padding:1rem; border:1px dashed #c33; background:#fff3f3; font-family:monospace; font-size:.9rem;">
    <div><strong>WP_BASE_URL:</strong> {WP_BASE || "(not set)"}</div>
    {hasTax && (
      <>
        <div><strong>taxonomy:</strong> {taxKey}</div>
        <div><strong>term:</strong> {taxSlug || String(taxId)}</div>
      </>
    )}
    <div><strong>REST URL:</strong> {restUrl || "(not used)"}</div>
    <div><strong>REST status:</strong> {String(restStatus ?? "")}</div>
    <div><strong>REST error:</strong> {String(restError ?? "")}</div>
    <div><strong>REST peek:</strong> {restPeek}</div>
    <div><strong>Auth:</strong> {WP_AUTH_BASIC ? "(Basic auth supplied)" : "(no auth)"} </div>
  </div>
)}

{count > 0 && (
  <div class={`hw-contain pr zindex10 ${countClass}`} id="blog-module-inner">
    {!hasTax ? (
      <>
        <h2 class="inline-block our-blog-tag-wrap">
          <div class="eyebrow our-blog-tag bg-tag">Our Blog</div>
        </h2>
        <div class="blog-subtitle lite tac">
          Exploring trends, tools, and best practices in janitorial and maintenance services.
        </div>
      </>
    ) : (
      <>
        <h3 class="inline-block our-blog-tag-wrap">
          <div class="eyebrow our-blog-tag bg-tag">Our Blog</div>
        </h3>
        <h2 class="blog-module-tax-title flex-wrap align-items-center">
          The latest trends, tools, and best practices in{" "}
          <span class="reg eyebrow bg-tag bg-gold inline-block c-darkbluetext blog-module-title-tag">
            {taxName}
          </span>
        </h2>
      </>
    )}

    <div class="flex-wrap blog-prev-wrap mt-[7rem] hw-slides" id={uniq} data-hw-flickity='{"cellAlign":"center"}'>
      {latestPosts.map((p) => (
        <BlogPrevItem post={p} img_size="intch_med" />
      ))}
    </div>
  </div>
)}

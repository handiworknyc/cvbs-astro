---
/**
 * src/components/blog.astro
 * - Fetch latest posts, optionally filtered by a custom taxonomy term.
 * - Taxonomy context accepted in two ways:
 *     A) OLD: taxonomy=[{ taxonomy, term_id, slug, name }]
 *     B) NEW: taxonomy="service" + termId + currentTerm (and/or termSlug)
 * - Order when taxonomy is provided:
 *     1) WPGraphQL taxQuery by SLUG (if available)
 *     2) REST fallbacks (?{tax}={id}, ?{tax}[]={id}, ?{tax}={slug}, ?{tax}[]={slug})
 * - NEW: In plain mode (homepage), if GraphQL fails/empty â†’ REST fallback to latest posts.
 */

import BlogPrevItem from "@/components/BlogPrevItem.astro";
import { fetchAPI } from "@/lib/wp";
import { getEnv, toBase64 } from "@/lib/env.ts";

const WP_BASE = import.meta.env.WP_BASE_URL || "";
const WP_AUTH_BASIC = getEnv("WP_AUTH_BASIC") || ""; // "user:pass"
const authHeaders = WP_AUTH_BASIC
  ? { Authorization: `Basic ${toBase64(WP_AUTH_BASIC)}` }
  : {};

// ---------- Types ----------
type ImageMap = Record<string, string>;
interface ImageLike { src?: string; alt?: string; sizes?: ImageMap }
interface PostLike {
  id?: number | string;
  title?: string;
  date?: string;
  dateISO?: string;
  excerpt?: string;
  permalink?: string;
  image?: ImageLike | null;
}
interface TaxTerm { taxonomy: string; term_id: number; name?: string; slug?: string }

interface Props {
  // OLD shape:
  taxonomy?: TaxTerm[] | string | null; // allow string too
  // NEW shape bits:
  termId?: number | null;
  currentTerm?: any;       // { id, slug, name, taxonomy, ... } from REST
  termSlug?: string | null;

  idPrefix?: string;
  perPage?: number;
}

const {
  taxonomy = null,
  termId = null,
  currentTerm = null,
  termSlug = null,

  idPrefix = "blog-prev-wrap",
  perPage = 6,
} = Astro.props as Props;

// ---------- Normalize incoming taxonomy to a single "tx" object ----------
function toNumOrNull(v: unknown): number | null {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
}

let tx: TaxTerm | null = null;
if (Array.isArray(taxonomy) && taxonomy.length > 0) {
  // OLD array shape wins if present
  const t0 = taxonomy[0] as any;
  tx = {
    taxonomy: (t0?.taxonomy ?? "").toString(),
    term_id: toNumOrNull(t0?.term_id) ?? toNumOrNull(currentTerm?.id) ?? toNumOrNull(termId) ?? 0,
    slug: (t0?.slug ?? currentTerm?.slug ?? termSlug ?? "").toString(),
    name: (t0?.name ?? currentTerm?.name ?? "").toString(),
  };
} else if (typeof taxonomy === "string" && taxonomy.trim()) {
  // NEW separate props
  tx = {
    taxonomy: taxonomy.trim(),
    term_id: toNumOrNull(termId) ?? toNumOrNull(currentTerm?.id) ?? 0,
    slug: (currentTerm?.slug ?? termSlug ?? "").toString(),
    name: (currentTerm?.name ?? "").toString(),
  };
} else {
  tx = null;
}

const hasTax = !!(tx && tx.taxonomy && (tx.term_id || tx.slug));
const taxKey  = tx?.taxonomy ?? ""; // e.g. "service"
const taxName = tx?.name ?? "";
const taxSlugNorm = (tx?.slug ?? "").toString();
const taxIdNorm   = toNumOrNull(tx?.term_id) ?? null;

// ---------- GraphQL queries ----------
const GQL_LATEST = /* GraphQL */ `
  query BlogLatest($first:Int!) {
    posts(first: $first, where: { orderby: { field: DATE, order: DESC } }) {
      nodes {
        databaseId
        title
        date
        uri
        excerpt
        categories { nodes { name uri } }
        tags { nodes { name uri } }
        featuredImage {
          node {
            sourceUrl
            srcSet
            altText
            mediaDetails { width height }
          }
        }
      }
    }
  }
`;

const GQL_BY_TAX = /* GraphQL */ `
  query PostsByTax($first:Int!, $tax: TaxonomyEnum!, $term: [String]) {
    posts(first: $first, where: {
      taxQuery: {
        taxArray: [
          { taxonomy: $tax, terms: $term, field: SLUG, operator: IN }
        ]
      },
      orderby: { field: DATE, order: DESC }
    }) {
      nodes {
        databaseId
        title
        date
        uri
        excerpt
        featuredImage {
          node {
            sourceUrl
            srcSet
            altText
            mediaDetails { width height }
          }
        }
      }
    }
  }
`;

// ---------- Helpers ----------
function toTaxEnum(s: string): string {
  return s.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
}

function toPostLike(n: any): PostLike {
  const img = n?.featuredImage?.node;
  const sizes: ImageMap = {};
  if (img?.srcSet) {
    for (const part of String(img.srcSet).split(",")) {
      const [u, w] = part.trim().split(" ");
      if (u && w) sizes[w] = u;
    }
  }
  return {
    id: n?.databaseId ?? n?.id,
    title: n?.title ?? "",
    date: n?.date ?? "",
    dateISO: n?.date ?? "",
    excerpt: n?.excerpt ?? "",
    permalink: n?.uri ?? "#",
    image: img ? { src: img.sourceUrl, alt: img.altText || "", sizes } : null,
  };
}

function fromRestPost(p: any): PostLike {
  const media = p?._embedded?.["wp:featuredmedia"]?.[0];
  const src = media?.source_url || null;
  return {
    id: p?.id,
    title: p?.title?.rendered ?? "",
    date: p?.date ?? "",
    dateISO: p?.date ?? "",
    excerpt: p?.excerpt?.rendered ?? "",
    permalink: p?.link ?? "#",
    image: src ? { src, alt: media?.alt_text || "" } : null,
  };
}

// Small helper to try REST and record attempt
type RestTry = { label: string; url: string; status?: number | null; ok?: boolean | null; peek?: string };
const restTries: RestTry[] = [];

async function restAttempt(url: string, label: RestTry["label"]): Promise<PostLike[] | null> {
  const rec: RestTry = { label, url, status: null, ok: null, peek: "" };
  restTries.push(rec);

  try {
    const res = await fetch(url, { headers: { Accept: "application/json", ...authHeaders } });
    rec.status = res.status;
    rec.ok = res.ok;

    if (!res.ok) {
      rec.peek = (await res.text().catch(() => ""))?.slice(0, 300) || "";
      return null;
    }
    const arr = await res.json();
    if (!Array.isArray(arr) || arr.length === 0) return [];
    return arr.map(fromRestPost);
  } catch (e: any) {
    rec.peek = e?.message || String(e);
    return null;
  }
}

// ---------- Fetch logic ----------
let latestPosts: PostLike[] = [];

let mode: "taxonomy" | "plain" = hasTax ? "taxonomy" : "plain";
let pathUsed:
  | "gql:plain"
  | "gql:tax"
  | "rest:id"
  | "rest:id[]"
  | "rest:slug"
  | "rest:slug[]"
  | "rest:plain"
  | "none" = "none";

let gqlError: string | null = null;

try {
  if (mode === "taxonomy") {
    // 1) GraphQL by slug (only if we *have* a slug)
    if (taxSlugNorm) {
      try {
        const data = await fetchAPI(GQL_BY_TAX, {
          first: perPage,
          tax: toTaxEnum(taxKey),
          term: [taxSlugNorm],
        });
        const nodes = data?.posts?.nodes ?? [];
        latestPosts = nodes.map(toPostLike);
        if (latestPosts.length > 0) {
          pathUsed = "gql:tax";
        } else {
          throw new Error("GraphQL returned zero posts for taxonomy");
        }
      } catch (err: any) {
        gqlError = err?.message || String(err);
      }
    }

    // 2) REST fallbacks if (a) no slug or (b) gql returned empty/failed
    if (latestPosts.length === 0 && WP_BASE) {
      const base = `${WP_BASE}/wp-json/wp/v2/posts?per_page=${perPage}&_embed`;

      // a) numeric id
      if (taxIdNorm !== null) {
        const u1 = `${base}&${encodeURIComponent(taxKey)}=${encodeURIComponent(String(taxIdNorm))}`;
        const r1 = await restAttempt(u1, "rest:id");
        if (Array.isArray(r1)) {
          latestPosts = r1;
          pathUsed = "rest:id";
        }
        if (latestPosts.length === 0) {
          const u1b = `${base}&${encodeURIComponent(taxKey)}[]=${encodeURIComponent(String(taxIdNorm))}`;
          const r1b = await restAttempt(u1b, "rest:id[]");
          if (Array.isArray(r1b)) {
            latestPosts = r1b;
            pathUsed = "rest:id[]";
          }
        }
      }

      // b) slug
      if (latestPosts.length === 0 && taxSlugNorm) {
        const u2 = `${base}&${encodeURIComponent(taxKey)}=${encodeURIComponent(taxSlugNorm)}`;
        const r2 = await restAttempt(u2, "rest:slug");
        if (Array.isArray(r2)) {
          latestPosts = r2;
          pathUsed = "rest:slug";
        }
        if (latestPosts.length === 0) {
          const u2b = `${base}&${encodeURIComponent(taxKey)}[]=${encodeURIComponent(taxSlugNorm)}`;
          const r2b = await restAttempt(u2b, "rest:slug[]");
          if (Array.isArray(r2b)) {
            latestPosts = r2b;
            pathUsed = "rest:slug[]";
          }
        }
      }
    }
  } else {
    // -------- PLAIN MODE (homepage) --------
    let gqlOk = false;
    try {
      const data = await fetchAPI(GQL_LATEST, { first: perPage });
      const nodes = data?.posts?.nodes ?? [];
      latestPosts = nodes.map(toPostLike);
      if (latestPosts.length > 0) {
        pathUsed = "gql:plain";
        gqlOk = true;
      }
    } catch (err: any) {
      gqlError = err?.message || String(err);
      gqlOk = false;
    }

    // REST fallback for homepage if GraphQL failed or returned 0
    if (!gqlOk && WP_BASE) {
      const u = `${WP_BASE}/wp-json/wp/v2/posts?per_page=${perPage}&_embed`;
      const r = await restAttempt(u, "rest:plain");
      if (Array.isArray(r)) {
        latestPosts = r;
        pathUsed = "rest:plain";
      }
    }
  }
} catch (e: any) {
  console.error("[blog.astro] fetch failed:", e?.message || e);
  latestPosts = [];
  pathUsed = "none";
}

// ---------- Render ----------
const count = latestPosts.length;
const uniq = `${idPrefix}-${Math.random().toString(36).slice(2, 10)}`;
const countClass = `count-${count}`;
---

{/* Always-on debug panel */}
<!-- <div style="margin:1rem auto; max-width:64rem; padding:1rem; border:1px dashed #c33; background:#fff3f3; font-family:monospace; font-size:.9rem;">
  <div><strong>WP_BASE_URL:</strong> {WP_BASE || "(not set)"} </div>
  <div><strong>mode:</strong> {mode} | <strong>pathUsed:</strong> {pathUsed}</div>
  {mode === "taxonomy" && (
    <>
      <div><strong>taxonomy:</strong> {taxKey}</div>
      <div><strong>term (slug/id):</strong> {(taxSlugNorm || "(none)")} / {String(taxIdNorm ?? "(none)")}</div>
      <div><strong>name:</strong> {taxName || "(n/a)"} </div>
      {gqlError && <div><strong>gqlError:</strong> {gqlError}</div>}
      {restTries.length > 0 && (
        <details open>
          <summary><strong>REST attempts ({restTries.length})</strong></summary>
          <ul style="margin:0.5rem 0 0; padding-left:1.25rem;">
            {restTries.map((t) => (
              <li>
                <div><strong>{t.label}</strong> â€” status: {String(t.status ?? "")} | ok: {String(t.ok ?? "")}</div>
                <div style="overflow:auto; white-space:nowrap;">{t.url}</div>
                {t.peek && <div>peek: {t.peek}</div>}
              </li>
            ))}
          </ul>
        </details>
      )}
    </>
  )}
  {mode === "plain" && gqlError && <div><strong>gqlError:</strong> {gqlError}</div>}
  <div><strong>Auth:</strong> {WP_AUTH_BASIC ? "(Basic auth supplied)" : "(no auth)"} </div>
  <div><strong>count:</strong> {String(count)}</div>
</div> -->

{count > 0 && (
  <div class={`hw-contain pr zindex10 ${countClass}`} id="blog-module-inner">
    {mode === "plain" ? (
      <>
        <h2 class="inline-block our-blog-tag-wrap">
          <div class="eyebrow our-blog-tag bg-tag">Our Blog</div>
        </h2>
        <div class="blog-subtitle lite tac">
          Exploring trends, tools, and best practices in janitorial and maintenance services.
        </div>
      </>
    ) : (
      <>
        <h3 class="inline-block our-blog-tag-wrap">
          <div class="eyebrow our-blog-tag bg-tag">Our Blog</div>
        </h3>
        <h2 class="blog-module-tax-title flex-wrap align-items-center">
          The latest trends, tools, and best practices in{" "}
          <span class="reg eyebrow bg-tag bg-gold inline-block c-darkbluetext blog-module-title-tag">
            {taxName}
          </span>
        </h2>
      </>
    )}
    <div class="pr ofh blog-prev-ofh">
      <div class="flex-wrap blog-prev-wrap mt-[7rem] hw-slides" id={uniq} data-hw-flickity='{"cellAlign":"center"}'>
        {latestPosts.map((p) => (
          <BlogPrevItem post={p} img_size="intch_med" />
        ))}
      </div>
    </div>
  </div>
)}

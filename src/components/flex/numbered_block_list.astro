---
import { fetchFlexText } from "../../lib/wp/pullFlexText";

// Log incoming props on the server
console.log("[project_slider] Astro.props:", Astro.props);

// Pull type
export type PullFrom = {
  objectType: "post" | "term";
  objectId?: number;
  taxonomy?: string;    // required when objectType === "term"
  field?: string;       // defaults to "flex_text"
  selector?: string;    // e.g. "#why-clearview"
  rowIndex?: number;
};

interface Props {
  // Page context
  postId?: number | null;
  currentPost?: any;

  // Taxonomy context
  termId?: number | null;
  taxonomy?: string | null;

  // Misc
  section_id?: string;
  wrapperClasses?: string;
  geo_keyword?: string;
  rowIndex?: number;
}

const {
  postId = null,
  currentPost = null, // not used directly here but kept for symmetry
  termId = null,
  taxonomy = null,
  section_id = "",
  wrapperClasses = "",
  geo_keyword = "",
  rowIndex = Astro.props.rowIndex as number | undefined,
} = Astro.props as Props;

let pulledHtml = "";
let pullDebug: any = null;

// Decide the pull source:
// 1) If we have a taxonomy term context, pull as term
// 2) Else if we have a postId, pull as post
let effectivePull: PullFrom | null = null;

if (termId && taxonomy) {
  effectivePull = {
    objectType: "term",
    objectId: termId,
    taxonomy: String(taxonomy),
    field: "flex_text",
    rowIndex,
  };
} else if (postId) {
  effectivePull = {
    objectType: "post",
    objectId: postId,
    field: "flex_text",
    rowIndex,
  };
}

if (effectivePull) {
  const pulled = await fetchFlexText(effectivePull);
  pulledHtml = pulled?.html || "";
  pullDebug = pulled || {};

  console.log("[project_slider] pull result:", {
    mode: effectivePull.objectType,
    taxonomy: effectivePull.taxonomy || null,
    objectId: effectivePull.objectId ?? null,
    status: pulled?.status,
    url: pulled?.url,
    error: pulled?.error,
    peek: pulled?.peek,
    htmlLen: pulledHtml.length,
  });
} else {
  console.warn("[project_slider] No valid pull context (need postId OR {termId,taxonomy}).", {
    postId,
    termId,
    taxonomy,
  });
}
---

{pulledHtml ? (
  <Fragment set:html={pulledHtml} />
) : (
  <section id={section_id} class={wrapperClasses} data-geo={geo_keyword}>
    <div>No pulled HTML â€“ render local here.</div>

    {/* Visible debug panel for live Netlify troubleshooting */}
    <div style="margin-top:1rem; padding:1rem; border:1px dashed #c33; background:#fff3f3; font-family:monospace; font-size:.9rem;">
      <div><strong>WP_BASE_URL:</strong> {import.meta.env.WP_BASE_URL || "(not set)"} </div>
      <div><strong>mode:</strong> {termId && taxonomy ? "taxonomy" : postId ? "page" : "none"} </div>
      <div><strong>taxonomy:</strong> {String(taxonomy ?? "")}</div>
      <div><strong>termId:</strong> {String(termId ?? "")}</div>
      <div><strong>postId:</strong> {String(postId ?? "")}</div>
      <div><strong>rowIndex:</strong> {String(rowIndex ?? "")}</div>
      {pullDebug && (
        <details open>
          <summary><strong>Pull Debug</strong></summary>
          <div><strong>status:</strong> {String(pullDebug.status ?? "")}</div>
          <div><strong>url:</strong> {String(pullDebug.url ?? "")}</div>
          <div><strong>error:</strong> {String(pullDebug.error ?? "")}</div>
          <div><strong>peek:</strong> {String(pullDebug.peek ?? "").slice(0, 300)}</div>
          <div><strong>raw keys:</strong> {pullDebug.raw ? Object.keys(pullDebug.raw).join(", ") : "(none)"} </div>
        </details>
      )}
    </div>
  </section>
)}

<style is:global>
.img-full-image-wrap {
    min-height: calc(var(--jsVhUnits100) * .85);
}
.img_full_quote-module .img-full-text {
  width: 100%;
  z-index: 10;
}

.img-full-title,
.img-full-text {
  padding-left: 3rem;
  padding-top: 2.5rem;
}

.img-align-bottom img {
  object-position: center bottom;
}

.img-align-top img {
  object-position: center top;
}

.img-full-image-wrap,
.img-full-image-inner img {
z-index: 20;
  border-radius: var(--imgRadius);
}

.img-full-image {
  will-change: transform;
  transform: scale(calc((0.1 * var(--progress)) + 1));
}

.img_full_quote-module {
  .img-full-image-inner img.lazy-loaded.selected {
    opacity: 1;
  }

  .img-full-image-inner img.lazy-loaded:not(.selected)) {
    opacity: 0 !important;
  }
}

.img-full-stats-wrap {
  width: 80%;
  min-width: 920px;
  align-items: stretch !important;
  bottom: var(--containerPadding);
  right: 0rem;
  gap: 30px;

  .stat-outer {
    font-size: calc(4vw + 1.5rem);
    line-height: 0.85em;
  }

  .stat-card {
    font-size: 1.41rem;
    background: rgba(0, 0, 0, 0.17);
    box-shadow: 0 0 2rem rgba(0, 0, 0, 0.15);
    padding: 2rem;
    color: #fff;
    flex: 1;
    -webkit-backdrop-filter: blur(15px);
    backdrop-filter: blur(15px);
    border-radius: 1.5rem;
    max-width: 33.33%;

    p {
      font-size: 1.4rem;
      line-height: 1.75rem;
    }

    h3 {
      font-weight: 550;
      font-size: 1.75rem;
      line-height: 2rem;
      min-height: 2em;
    }
  }

  .img-full-stat-desc {
    margin: 0 -2rem;
    padding: 1.25rem 2rem 0;
    align-self: flex-end;
    font-size: 1.416rem;
    line-height: 1.75rem;
    min-height: 5rem;
    min-width: calc(100% + 4rem);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
}

@media (max-width: 1579px) {
  .img-full-title {
    padding-left: 2rem;
  }

  .img-full-stats-wrap {
    width: 100%;
    min-width: 0;
  }
}

@media (min-width: 1000px) {
  .img-full-stats-wrap {
    padding: 2rem;
    bottom: 0rem;
  }
}

@media (max-width: 999px) {
  .img-full-image-wrap {
    display: flex;
    flex-direction: column;
  }

  .img-full-image-inner {
    position: static !important;
  }

  .img_full-module {
    .img-full-stats-wrap {
      height: auto !important;
    }
  }

  .test-slide {
    max-width: calc(100% - 4rem);
    margin: 0 2rem;
    padding: 0 !important;
  }

  .img-full-quote {
    position: relative;
    margin-bottom: 0 !important;
  }

  .img_full_quote-module,
  .img_full-module {
    .img-full-image-inner {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
    }

    .img-full-image-wrap {
      height: auto !important;
    }

    .full-testimonials-slider,
    .img-full-stats-wrap {
      margin-top: auto;
      padding-top: 6rem;
      margin-bottom: 2rem;
      position: relative !important;
    }

    .full-testimonials-slider {
      width: 100%;
      box-sizing: content-box;
    }
  }

  .img-full-stats-wrap .stat-card {
    height: auto;
    padding: 2rem 2rem 1.5rem;
    min-width: 320px;
    margin-left: auto;
    margin-top: 1.5rem;

    &:not(:last-child) {
      margin-bottom: 1rem;
    }
  }

  .img-full-stats-wrap .stat-card h3 {
    min-height: 0;
    font-size: 1.55rem;
  }

  .img-full-stats-wrap {
    height: auto;
    margin-top: auto;
    padding-top: 6rem;
    position: relative !important;
  }

  .img-full-stats-wrap .img-full-stat-desc {
    min-height: 0;
  }

  .img-full-stats-wrap .stat-outer {
    font-size: calc(5vw + 2.25rem);
  }
}

@media (max-width: 699px) {
  .img-full-title {
    padding: 0;
  }

  .img-full-stats-wrap .stat-card {
    margin-right: auto;
    margin-left: 0;
  }

  .img-full-stats-wrap .stat-card p {
    font-size: 1.3rem;
  }
}

@media (max-width: 599px) {
  .img-full-stats-wrap .stat-card {
    height: auto;
  }

  .img-full-text .zeta {
    font-size: 1.44rem;
  }
}

@media (max-width: 391px) {
  .img-full-stats-wrap .stat-card {
    min-width: 100%;
    width: 100%;
  }
}

.img-full-wrap .img-full-image.lazy-loaded {
  opacity: 0.8;
}

.img-full-wrap {
  background: #000;
  border-radius: 2rem;

  &:before {
    content: '';
    position: absolute;
    inset: 0;
    pointer-events: none;
    background: linear-gradient(
      to bottom right,
      rgba(0, 0, 0, 0.55) 0%,
      rgba(0, 0, 0, 0) 70%
    );
    z-index: 20;
    pointer-events: none;
  }
}

.img-full-image-inner {
  padding: 1rem;
}
    
</style>
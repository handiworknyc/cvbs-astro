---
/**
 * image_cards.astro
 * - Pull-through mode from existing HTML (`pull_from_html` + optional `pull_from_id`)
 * - Local render mode from `cards[]`
 * - Uses SmartImage.astro in place of intchImgHtml() for layout != 4
 * - For layout === 4, outputs a simple <img> with the small size (intch_sm), mirroring PHP
 */

import SmartImage from '@ui/SmartImage.astro';

type Btn = {
  title?: string;
  url?: string;
};

type CardImage = {
  id?: number;
  src?: string;
  url?: string;
  sizes?: Record<string, string>;
  width?: number;
  height?: number;
  alt?: string;
};

type Card = {
  images?: CardImage[];
  title?: string;
  text?: string;        // HTML OR plain text with \n
  button?: Btn | null;
  checklist2?: string;  // newline-separated list items
};

interface Props {
  // Pull-through
  pull_from_html?: string;
  pull_from_id?: string;

  // Local render
  cards?: Card[];

  // Section/meta
  section_title?: string;
  section_text?: string;

  // Visual config
  layout?: number | string;   // layout==4 triggers "small image" path like PHP
  bg_img_cards?: string | number | boolean | null | undefined; // used in class: bg-card-<value>

  // Container class
  containerClass?: string;

  // SmartImage plumbing (optional pass-throughs)
  smartImageSizes?: string;
  cdnHost?: string;
  wpHost?: string;
  critical?: boolean;
}

const {
  pull_from_html,
  pull_from_id,
  cards = [],
  section_title = "",
  section_text = "",
  layout = 1,
  bg_img_cards = "", // <- default blank so "bg-card-" (no suffix) unless set
  containerClass = "hw-contain pr ofh",
  smartImageSizes = "(max-width: 1200px) 40vw, 100vw",
  cdnHost,
  wpHost,
  critical = false,
} = Astro.props as Props;

/* ---------------- helpers ---------------- */

function decodeEntitiesDeep(s = "") {
  let out = s;
  for (let i = 0; i < 4; i++) {
    const before = out;
    out = out
      .replace(/&#x([0-9a-fA-F]+);/g, (_, h) => String.fromCharCode(parseInt(h, 16)))
      .replace(/&#(\d+);/g,       (_, n) => String.fromCharCode(parseInt(n, 10)))
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/&amp;/g, "&");
    if (out === before) break;
  }
  return out;
}

function ensureHtml(s = "") {
  if (!s) return "";
  let decoded = decodeEntitiesDeep(s);
  const hasTags = /<\/?[a-z][\s\S]*>/i.test(decoded);
  if (!hasTags && decoded.includes("\n")) {
    decoded = decoded.replace(/\r?\n/g, "<br />");
  }
  return decoded;
}

/** Decide the suffix for `bg-card-<suffix>`:
 * - "default" → "1"
 * - "", false, "0", "none" → "" (so class becomes "bg-card-")
 * - any other truthy value → its string form
 */
function bgCardSuffix(v: any): string {
  // Explicit boolean handling
  if (v === true) return "1";
  if (v === false || v == null) return "";

  const s = String(v).trim().toLowerCase();

  // Common “blank” cases
  if (!s || s === "0" || s === "none" || s === "false") return "";

  // Treat "default" as 1
  if (s === "default") return "1";

  // Numbers stay numbers (e.g., 2 -> "2")
  const n = Number(s);
  if (!Number.isNaN(n)) return String(n);

  // Anything else becomes its string
  return String(v).trim();
}


/* ---------------- Pull-through helpers ---------------- */

function extractSection(html: string, selector?: string): string {
  if (!html) return "";
  const src = String(html);

  if (selector && selector.startsWith("#")) {
    const id = selector.slice(1);
    const re = new RegExp(
      `<([a-zA-Z]+)([^>]*\\s)id=["']${id}["'][^>]*>[\\s\\S]*?<\\/\\1>`,
      "i"
    );
    const m = src.match(re);
    if (m) return m[0];
  }

  // Default to the first .image_cards-module
  {
    const re = /<div[^>]*class=["'][^"']*image_cards-module[^"']*["'][^>]*>([\s\S]*?)<\/div>/i;
    const m = src.match(re);
    if (m) return m[0];
  }

  return src;
}

function applyOverrides(html: string, title?: string, textHtml?: string): string {
  let out = html;

  if (title && title.trim()) {
    out = out.replace(
      /<h2\b[^>]*>[\s\S]*?<\/h2>/i,
      `<h2 class="section-eyebrow eyebrow min-[700px]:pb-0 pb-6">${ensureHtml(title)}</h2>`
    );
  }

  if (textHtml && textHtml.trim()) {
    const blockRe = /<div\b[^>]*class=["'][^"']*img-cards-section-text[^"']*["'][^>]*>[\s\S]*?<\/div>/i;
    const injected = `<div class="lg-section-text img-cards-section-text med mb3h wrap-chars lilblur ls-5 round-vw-lh">${ensureHtml(
      textHtml
    )}</div>`;
    if (blockRe.test(out)) {
      out = out.replace(blockRe, injected);
    } else {
      out = out.replace(/(<h2\b[^>]*>[\s\S]*?<\/h2>)/i, `$1\n${injected}`);
    }
  }

  return out;
}

/* --------------- Local render helpers --------------- */

const isLayout4 = String(layout) === "4";
const flexClass = isLayout4 ? "flex-wrap-1520" : "flex-wrap";
const bgClass = `bg-card-${bgCardSuffix(bg_img_cards)}`;

function toSmartImagesMap(img: CardImage) {
  const sizes = img.sizes || {};
  const xl = sizes.intch_xl || sizes.intch_lg || img.src || img.url;
  const lg = sizes.intch_lg || sizes.intch_med || img.src || img.url;
  const md = sizes.intch_med || sizes.intch_sm || undefined;
  const sm = sizes.intch_sm || undefined;

  const map: Record<string, string | false | undefined> = {
    xl: xl || undefined,
    large: lg || undefined,
    med: md ?? undefined,
    small: sm ?? undefined,
  };
  return map;
}

function renderChecklist(text?: string) {
  if (!text) return { html: "", count: 0 };
  const lines = text.split(/\r?\n/).map((s) => s.trim()).filter(Boolean);
  if (!lines.length) return { html: "", count: 0 };
  const lis = lines.map((li) => `<li class="check-list-item">${li}</li>`).join("");
  return { html: `<ul class="check-list pt-9">${lis}</ul>`, count: lines.length };
}

function buttonBits(btn?: Btn | null) {
  if (!btn) return { url: "", html: "" };
  const url = btn.url || "";
  const label = (btn.title && btn.title.trim()) || "Learn More";
  return { url, html: `<span class="small-btn clash icon-after icon-arrow-right">${label}</span>` };
}

/* ---------------------- Render ---------------------- */
const pulled =
  typeof pull_from_html === "string" && pull_from_html.trim()
    ? applyOverrides(extractSection(pull_from_html, pull_from_id), section_title, section_text)
    : "";
---

{pulled ? (
  // ===== Mode 1: Pull-through =====
  <div class={containerClass}>
    <div set:html={pulled} />
  </div>
) : (
  // ===== Mode 2: Local render =====
  <div class={containerClass}>
    <div class="img-cards-title-nav flex-wrap-700 min-[700px]:pt-[3.5rem] pb-6 tal align-items-center">
      <h2
        class="section-eyebrow eyebrow pb0-700 pb-6"
        set:html={ensureHtml(section_title)}
      />
    </div>

    {section_text && (
      <div
        class="lg-section-text img-cards-section-text med mb3h wrap-chars lilblur ls-5 round-vw-lh"
        set:html={ensureHtml(section_text)}
      />
    )}
    <div class='pr ofh'>
      <div
        class={`img-card-outer pr ${bgClass} equal-height-cells layout-${layout} hw-slides ${flexClass} tal img-card-slider`}
        id={`image-cards-${Math.random().toString(36).slice(2, 10)}`}
      >
        {cards.map((c) => {
          const { html: listHtml, count } = renderChecklist(c.checklist2);
          const { url: btnUrl, html: btnHtml } = buttonBits(c.button);
          const El = btnUrl ? "a" : "div";

          return (
            <El class="img-card-item block" {...(btnUrl ? { href: btnUrl } : {})}>
              <div class="img-card-inner flex-wrap">
                <div class="img-card-text-wrap mb-4 min-[500px]:pt-[3.5rem] pt-9">
                  <h3
                    class="img-card-title ls-5"
                    set:html={ensureHtml(c.title)}
                  />

                  <div class={`img-card-text pb-4 checkcount-${count}`}>
                    {c.text && <div set:html={ensureHtml(c.text)} />}
                    {listHtml && <div set:html={listHtml} />}
                  </div>

                  { btnHtml && <Fragment set:html={btnHtml} /> }
                </div>

                <div class="img-card-img-wrap">
                  {Array.isArray(c.images) && c.images.length > 0 ? (
                    isLayout4 ? (
                      c.images.map((img) => {
                        const src = img?.sizes?.intch_sm || img?.src || img?.url || "";
                        if (!src) return null;
                        return (
                          <img
                            src={src}
                            class="img-card-img"
                            alt={img?.alt ?? ""}
                            loading="lazy"
                            decoding="async"
                          />
                        );
                      })
                    ) : (
                      c.images.map((img) => {
                        const map = toSmartImagesMap(img);
                        const haveAny = map.xl || map.large || map.med || map.small;
                        if (!haveAny) return null;
                        return (
                          <SmartImage
                            images={map as any}
                            sizes={smartImageSizes}
                            alt={img?.alt ?? ""}
                            imgClass="img-full-image abs obj-cover zindex0 tr-fix"
                            critical={critical}
                            cdnHost={cdnHost}
                            wpHost={wpHost}
                            fetchpriority={critical ? 'high' : 'low'}
                          />
                        );
                      })
                    )
                  ) : null}
                </div>
              </div>
            </El>
          );
        })}
      </div>
    </div>
  </div>
)}

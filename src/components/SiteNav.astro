---
export const prerender = false;

import { getHeaderMenu } from "../lib/wp/getHeaderMenu";
import { getEnv, toBase64 } from "@/lib/env"; // cross-runtime env + base64 helpers

/* ---------------------------
   Env + base URLs (Edge-safe)
---------------------------- */
const WP_BASE_URL = getEnv("WP_BASE_URL"); // prefer runtime env
const WORDPRESS_API_URL = getEnv("WORDPRESS_API_URL");

/** Basic Auth header for WP (Edge/Node safe) */
function authHeaders() {
  const pair = getEnv("WP_AUTH_BASIC"); // "user:pass"
  if (!pair) return {};
  const token = toBase64(pair);
  return token ? { Authorization: `Basic ${token}` } : {};
}

/** Normalize host (strip www.) for robust same-origin checks */
function normalizeHost(host: string) {
  return String(host || "").replace(/^www\./i, "").toLowerCase();
}

/** Convert WP absolute URLs in HTML to Astro-relative paths (preserves ?query and #hash). */
function rewriteMenuUrls(html: string, wpBase: string) {
  if (!html) return html;
  let base: URL | null = null;
  try {
    base = new URL(wpBase);
  } catch {
    base = null;
  }

  return html.replace(/href=(['"])([^'"]+)\1/gi, (full, quote, href) => {
    try {
      // skip non-http links & pure hashes
      if (/^(mailto:|tel:|sms:|javascript:|#)/i.test(href)) return full;

      // Absolute URL?
      if (/^https?:\/\//i.test(href)) {
        const u = new URL(href);
        if (base && normalizeHost(u.hostname) === normalizeHost(base.hostname)) {
          const path = u.pathname || "/";
          const search = u.search || "";
          const hash = u.hash || "";
          return `href=${quote}${path}${search}${hash}${quote}`;
        }
        return full; // different origin -> leave as-is
      }

      // Relative URL already
      return full;
    } catch {
      return full;
    }
  });
}

/* ---------------------------
   DIAGNOSTIC: live REST probe
---------------------------- */
const baseFromGql = WORDPRESS_API_URL ? WORDPRESS_API_URL.replace(/\/graphql\/?$/i, "") : "";
const resolvedBase = baseFromGql || WP_BASE_URL || "";
const endpoint = resolvedBase ? new URL("/wp-json/astro/v1/headermenu", resolvedBase).toString() : null;

const pair = getEnv("WP_AUTH_BASIC");
const authHeader = pair ? { Authorization: `Basic ${toBase64(pair)}` } : {};
const hasAuth = !!authHeader.Authorization;

let diag = {
  runtime: typeof Deno !== "undefined" ? "edge" : "node",
  endpoint,
  hasAuth,
  status: null as null | number,
  contentType: "",
  bodySnippet: "",
  error: ""
};

if (endpoint) {
  try {
    const r = await fetch(endpoint, {
      headers: { Accept: "application/json, text/html;q=0.9", ...authHeader },
      cache: "no-store"
    });
    diag.status = r.status;
    diag.contentType = r.headers.get("content-type") || "";
    const t = await r.text();
    diag.bodySnippet = t.replace(/\s+/g, " ").slice(0, 260);
  } catch (e: any) {
    diag.error = String(e).slice(0, 260);
  }
}

/* ---------------------------
   Fetch WP menu (never throw)
---------------------------- */
let rawHeaderMenu = "";
try {
  rawHeaderMenu = await getHeaderMenu(); // includes server-side auth internally
} catch (e: any) {
  console.error("[siteNav] getHeaderMenu failed:", e?.message || e);
}
const headerMenu = rewriteMenuUrls(rawHeaderMenu, WP_BASE_URL);

/* ---------------------------
   Options: phone/email probe
---------------------------- */
async function tryFetch(url: string) {
  try {
    const res = await fetch(url, {
      headers: { Accept: "application/json", ...authHeaders() },
      cache: "no-store"
    });
    const text = await res.text(); // tolerate non-JSON
    let data: any = null;
    try { data = JSON.parse(text); } catch {}
    return { ok: res.ok, status: res.status, url, data, raw: text };
  } catch (err: any) {
    return { ok: false, status: 0, url, data: null, raw: String(err) };
  }
}

function cleanTel(s: string) {
  return `tel:${String(s || "").replace(/[^+\d]/g, "")}`;
}

const endpoints = WP_BASE_URL
  ? [
      `${WP_BASE_URL}/wp-json/hw/v1/options`,
      `${WP_BASE_URL}/wp-json/acf/v3/options/options`,
      `${WP_BASE_URL}/wp-json/acf/v3/options`,
      `${WP_BASE_URL}/wp-json/acf/options/options`,
      `${WP_BASE_URL}/wp-json/options/acf`
    ]
  : [];

let email = "";
let phone = "";

for (const url of endpoints) {
  const r = await tryFetch(url);
  const root = (r.data?.acf ?? r.data) ?? null;
  const maybePhone = root?.site_phone;
  const maybeEmail = root?.site_email;
  if (maybePhone || maybeEmail) {
    phone = String(maybePhone ?? "");
    email = String(maybeEmail ?? "");
    break;
  }
}

// Optional fallbacks via env (only if you expose them)
email = email || getEnv("PUBLIC_FALLBACK_EMAIL") || "";
phone = phone || getEnv("PUBLIC_FALLBACK_PHONE") || "";

// Hrefs & assets
const phoneHref = phone ? cleanTel(phone) : undefined;

// NOTE: If WP is behind Basic Auth, these image URLs wonâ€™t load client-side.
// Consider mirroring assets to /public for prod.
const logoSrc = `${WP_BASE_URL}/wp-content/uploads/2025/08/cropped-cvbsfinalnew.png.webp`;
const phoneIcon = `${WP_BASE_URL}/wp-content/uploads/2025/09/phone.svg`;
const googleLogo = `${WP_BASE_URL}/wp-content/uploads/2025/09/google.svg`;
const googleStars = `${WP_BASE_URL}/wp-content/uploads/2025/08/stars.svg`;
---

<header id="header" class="group mob-menu-abs">
  <div class="header-inner">
    <div class="hw-contain flex-wrap tal align-items-center">
      <a class="logo" id="header-logo-a" href="/">
        <img class="logo-img" src={logoSrc} alt="Logo" />
      </a>

      <nav id="main-nav" class="pr tac resp-header-menu header-nav collapse">
        <div class="main-nav-inner pr">
          <ul
            class="group resp-header-menu-ul align-items-center flex-wrap"
            data-sal
            data-sal-repeat
          >
            <!-- dump the WP menu <li>s (or a full <ul>) -->
            <Fragment set:html={headerMenu || ""} />

            {(!headerMenu || !headerMenu.trim()) && (
              <li class="menu-item debug-empty" style="color:#c00;max-width:640px;white-space:normal;line-height:1.25;">
                <strong>Menu unavailable</strong>
                <div style="font-size:12px;margin-top:.25rem">
                  <div><code>runtime</code>: {diag.runtime}</div>
                  <div><code>endpoint</code>: {diag.endpoint || "(no base URL resolved)"}</div>
                  <div><code>hasAuth</code>: {String(diag.hasAuth)}</div>
                  <div><code>status</code>: {diag.status === null ? "(no request)" : String(diag.status)}</div>
                  <div><code>content-type</code>: {diag.contentType || "(n/a)"}</div>
                  {diag.bodySnippet && (<div><code>body</code>: {diag.bodySnippet}</div>)}
                  {diag.error && (<div><code>error</code>: {diag.error}</div>)}
                </div>
              </li>
            )}

            {phone && (
              <li class="header-phone menu-item">
                <a href={phoneHref} class="c-green flex-wrap align-items-center tal">
                  <img class="critical of-contain" src={phoneIcon} alt="Phone" />
                  <span class="the-num">{phone}</span>
                </a>
              </li>
            )}
          </ul>
        </div>
      </nav>

      <div class="header-right align-items-center flex-wrap">
        <a
          class="block header-btn header-quote-btn c-white bg-brandgreen clash"
          href="/"
          >Get a Quote</a
        >

        {phone && (
          <a
            href={phoneHref}
            class="mob-header-phone c-green flex-wrap align-items-center tal"
          >
            <img class="critical" src={phoneIcon} alt="Phone" />
            <span class="the-num">{phone}</span>
          </a>
        )}

        <a
          class="google-reviews clash flex-wrap tal align-items-center"
          href="/"
          aria-label="Google Reviews"
        >
          <img
            src={googleLogo}
            class="critical header-google-logo of-contain"
            alt="Google"
          />
          <div class="google-reviews-right">
            5 Star Rated
            <img class="google-stars" src={googleStars} alt="5 stars" />
          </div>
        </a>
      </div>

      <div class="nav-toggle-wrap flex-wrap align-items-center">
        <button
          class="nav-toggle collapsed first-load"
          aria-label="Click to view the main menu"
          data-toggle="collapse"
          data-target="#main-nav"
          ><span></span></button
        >
      </div>
    </div>
  </div>
</header>

<script>
  import initStickyHeader from "/src/scripts/sticky-header.ts";
  initStickyHeader();
  import initDropdowns from "/src/scripts/dropdowns.ts";
  const root = document.getElementById("header-nav") || document;
  initDropdowns(root);
</script>

<script>
  var theheader = document.getElementById("header"),
    ogheaderheight = theheader.offsetHeight;

  HW.slidemsgclosing = false;

  HW.setHeaderVar = function () {
    var headerheight = theheader.offsetHeight;
    HW.headerHeight = headerheight;
    document.querySelector(":root").style.setProperty("--headerHeight", headerheight + "px");
  };

  var sctop = document.documentElement.scrollTop;
  if (sctop == 0) {
    HW.$html.classList.add("hw-headroom-top");
  }

  HW.setHeaderVar();

  var $navtoggle = $$(".nav-toggle")[0];
  $navtoggle.classList.add("shown");

  HW.requestTimeout(function () {
    $navtoggle.classList.remove("shown");
    HW.requestTimeout(function () {
      $navtoggle.classList.remove("first-load");
    }, 250);
  }, 600);
</script>
